{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.045609,
     "end_time": "2021-01-21T14:11:14.604380",
     "exception": false,
     "start_time": "2021-01-21T14:11:14.558771",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TABLE OF CONTENTS\n",
    "\n",
    "* [1. INTRODUCTION](#section-one)\n",
    "* [2. SETUP](#section-two)\n",
    "    - [2.1 Draw Packages](#subsection-two-one)\n",
    "    - [2.2 Import/Wrangle Data](#subsection-two-two)\n",
    "    - [2.3 Generate the portfolio formation dates for our sample (Key idea #1)](#subsection-two-three)\n",
    "* [3. TESTING OVERREACTION HYPOTHESIS](#section-three)\n",
    "    - [3.1 Question 1: How do we construct portfolios?](#subsection-three-one)\n",
    "        - [3.1.1 Constructing portfolios on a single date (1 instance)](#subsection-three-one-one)\n",
    "        - [3.1.2 Constructing portfolios on each date (N instance) with a function (Key idea #2)](#subsection-three-one-two)\n",
    "    - [3.2 Question 2: How do we calculate holding period returns?](#subsection-three-two)\n",
    "        - [3.2.1 Constructing holding period returns on a single portfolio/date (1 instance)](#subsection-three-two-one)\n",
    "        - [3.2.2 Constructing holding period returns on each portfolio/date (N instance) with a function (Key idea #3)](#subsection-three-two-two)\n",
    "    - [3.3 Question 3: Do current losers beat current winners in the future?](#subsection-three-three)\n",
    "* [4. CONCLUSION](#section-four)\n",
    "* [5. PROBLEM SET 1: QUESTION 2](#section-five)\n",
    "* [6. REFERENCES](#section-six)\n",
    "\n",
    "Reminder: The dataset is for the use of this class only. Please do not share it beyond the classroom."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.043318,
     "end_time": "2021-01-21T14:11:14.691566",
     "exception": false,
     "start_time": "2021-01-21T14:11:14.648248",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"section-one\"></a>\n",
    "# 1. INTRODUCTION\n",
    "\n",
    "## Team members\n",
    "### Lucas Sebastian A0112080B\n",
    "### Sekson Ounsaengchan (Beer) A0227885M\n",
    "### Zhao Mengyu (Jessica) A0227914B\n",
    "\n",
    "## De Bondt and Thaler (1985)\n",
    "\n",
    "In the seminal paper, \"Does the stock market overreact?\" De Bondt and Thaler (1985) discover significant evidence of weak-form market inefficiencies. \n",
    "\n",
    "## Objective\n",
    "\n",
    "- Test for the overreaction hypothesis in financial markets based on \n",
    "  [De Bondt and Thaler (1985), Does the Stock Market Overreact?,\n",
    "  Journal of Finance](http://onlinelibrary.wiley.com/doi/10.1111/j.1540-6261.1985.tb05004.x/full).\n",
    "- Get similar results to Figure 3 in the paper.\n",
    "\n",
    "## Motivation\n",
    "\n",
    "- \"Research in experimental psychology has suggested that, in violation of Bayes' rule, most people tend to \"overreact\" to unexpected and dramatic news events.\" ~ De Bondt and Thaler (1985)\n",
    "- Does such behavior matter at the market level?\n",
    "  \n",
    "Note: Replication is imperfect, but in the spirit of the original paper. Empirical choices in data selection (number of observations required for portfolios, exchange types, etc.) and in portfolio performance evaluation (computing abnormal returns, forming portfolios, etc.) are different from the original paper. \n",
    "\n",
    "\n",
    "## Key Steps\n",
    "\n",
    "The beauty in De Bondt and Thaler's empirical test of overreaction hypothesis is its simplicity. Specifically, what DeBondt and Thaler do is calculate portfolio returns for some formation period – i.e. previous 36-month performance – and then see how that particular portfolio performs in an evaluation period – i.e. subsequent 36-month performance. To test the overreaction hypothesis, De Bondt and Thaler form loser and winner portfolios composed of the 30 worst-performing and 30 best-performing stocks, respectively, over the formation period. They then follow these portfolios for the subsequent 36 months and evaluate and compare their performance. The key steps are summarized below:\n",
    "\n",
    "1. Identify portfolio formation dates.\n",
    "2. Identify winner and loser portfolios by ranking securities by past returns.\n",
    "3. Track and calculate the holding period returns for each portfolio."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.044098,
     "end_time": "2021-01-21T14:11:14.780423",
     "exception": false,
     "start_time": "2021-01-21T14:11:14.736325",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"section-two\"></a>\n",
    "# 2. SETUP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.043354,
     "end_time": "2021-01-21T14:11:14.867707",
     "exception": false,
     "start_time": "2021-01-21T14:11:14.824353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-two-one\"></a>\n",
    "## 2.1 Draw Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "papermill": {
     "duration": 0.761192,
     "end_time": "2021-01-21T14:11:15.673903",
     "exception": false,
     "start_time": "2021-01-21T14:11:14.912711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime, timedelta\n",
    "from scipy import stats\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.043817,
     "end_time": "2021-01-21T14:11:15.762412",
     "exception": false,
     "start_time": "2021-01-21T14:11:15.718595",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-two-two\"></a>\n",
    "## 2.2 Import/Wrangle Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.044837,
     "end_time": "2021-01-21T14:11:15.851250",
     "exception": false,
     "start_time": "2021-01-21T14:11:15.806413",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is a monthly stock-level return file. The data have been pre-screened to include only common stock (SHRCD 10 or 11) and listings on AMEX, NYSE or NASDAQ (EXCHCD 1, 2 or 3). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "papermill": {
     "duration": 3.585117,
     "end_time": "2021-01-21T14:11:19.480684",
     "exception": false,
     "start_time": "2021-01-21T14:11:15.895567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sekso\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3444: DtypeWarning: Columns (2) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    }
   ],
   "source": [
    "local_path = \"C:/Users/sekso/Desktop/MBA/sem4/Fintech/Bootcamp Codes and Data/03 Behavioral Finance/\"\n",
    "# df_crsp = pd.read_csv(local_path + 'monthly.csv')  # Load part of the file to have a look\n",
    "\n",
    "df_crsp = pd.read_csv(local_path + \"msf_200901-202012.csv\")  # Load csv file into dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.051075,
     "end_time": "2021-01-21T14:11:19.587950",
     "exception": false,
     "start_time": "2021-01-21T14:11:19.536875",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Permno is a unique stock/share class-level identifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "papermill": {
     "duration": 0.066441,
     "end_time": "2021-01-21T14:11:19.700710",
     "exception": false,
     "start_time": "2021-01-21T14:11:19.634269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1033173 entries, 0 to 1033172\n",
      "Data columns (total 9 columns):\n",
      " #   Column  Non-Null Count    Dtype  \n",
      "---  ------  --------------    -----  \n",
      " 0   PERMNO  1033173 non-null  int64  \n",
      " 1   date    1033173 non-null  int64  \n",
      " 2   SICCD   1026989 non-null  object \n",
      " 3   PRC     1013647 non-null  float64\n",
      " 4   RET     1021281 non-null  object \n",
      " 5   SHROUT  1026302 non-null  float64\n",
      " 6   SPREAD  27865 non-null    float64\n",
      " 7   vwretd  1033173 non-null  float64\n",
      " 8   ewretd  1033173 non-null  float64\n",
      "dtypes: float64(5), int64(2), object(2)\n",
      "memory usage: 70.9+ MB\n"
     ]
    }
   ],
   "source": [
    "df_crsp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.045308,
     "end_time": "2021-01-21T14:11:19.792385",
     "exception": false,
     "start_time": "2021-01-21T14:11:19.747077",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " Panda treats DATE as an int64 object. We need DATE to be a datetime object, so we will parse the dates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "papermill": {
     "duration": 0.067212,
     "end_time": "2021-01-21T14:11:19.904814",
     "exception": false,
     "start_time": "2021-01-21T14:11:19.837602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PERMNO</th>\n",
       "      <th>date</th>\n",
       "      <th>SICCD</th>\n",
       "      <th>PRC</th>\n",
       "      <th>RET</th>\n",
       "      <th>SHROUT</th>\n",
       "      <th>SPREAD</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10001</td>\n",
       "      <td>20090130</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.502</td>\n",
       "      <td>0.03414</td>\n",
       "      <td>4297.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.077475</td>\n",
       "      <td>-0.024042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10001</td>\n",
       "      <td>20090227</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.940</td>\n",
       "      <td>0.056222</td>\n",
       "      <td>4297.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.100175</td>\n",
       "      <td>-0.107606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10001</td>\n",
       "      <td>20090331</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.180</td>\n",
       "      <td>-0.080537</td>\n",
       "      <td>4300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.086813</td>\n",
       "      <td>0.107474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10001</td>\n",
       "      <td>20090430</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.500</td>\n",
       "      <td>0.044621</td>\n",
       "      <td>4300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.109483</td>\n",
       "      <td>0.192762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10001</td>\n",
       "      <td>20090529</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.480</td>\n",
       "      <td>0.002941</td>\n",
       "      <td>4354.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.067797</td>\n",
       "      <td>0.102330</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PERMNO      date   SICCD    PRC        RET  SHROUT  SPREAD    vwretd  \\\n",
       "0   10001  20090130  4920.0  8.502    0.03414  4297.0     NaN -0.077475   \n",
       "1   10001  20090227  4920.0  8.940   0.056222  4297.0     NaN -0.100175   \n",
       "2   10001  20090331  4920.0  8.180  -0.080537  4300.0     NaN  0.086813   \n",
       "3   10001  20090430  4920.0  8.500   0.044621  4300.0     NaN  0.109483   \n",
       "4   10001  20090529  4920.0  8.480   0.002941  4354.0     NaN  0.067797   \n",
       "\n",
       "     ewretd  \n",
       "0 -0.024042  \n",
       "1 -0.107606  \n",
       "2  0.107474  \n",
       "3  0.192762  \n",
       "4  0.102330  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crsp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.045361,
     "end_time": "2021-01-21T14:11:19.998095",
     "exception": false,
     "start_time": "2021-01-21T14:11:19.952734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Letters, such as `C`, identify special cases in this dataset. In this case, we ask pandas to treat `C` as a null value. Please delve into the dataset documentation carefully, so to make sure that what you do is reasonable. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.046053,
     "end_time": "2021-01-21T14:11:20.089742",
     "exception": false,
     "start_time": "2021-01-21T14:11:20.043689",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We are re-importing the dataset with date parsing (into datetime object) and ret correction (from \"C\" to a null value)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "papermill": {
     "duration": 2.253045,
     "end_time": "2021-01-21T14:11:22.388037",
     "exception": false,
     "start_time": "2021-01-21T14:11:20.134992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['PERMNO', 'date', 'SICCD', 'PRC', 'RET', 'SHROUT', 'SPREAD', 'vwretd',\n",
      "       'ewretd'],\n",
      "      dtype='object')\n",
      "<class 'pandas.core.indexes.base.Index'>\n"
     ]
    }
   ],
   "source": [
    "df_crsp = pd.read_csv(local_path + \"msf_200901-202012.csv\", na_values=[\"B\", \"C\", \"Z\"], parse_dates=[\"date\"])\n",
    "\n",
    "# The output from WRDS returns a mixed of small and large cap column names. Let's standardize everything in small caps.\n",
    "cols = df_crsp.columns\n",
    "print(cols)\n",
    "print(type(cols))\n",
    "\n",
    "# List comprehension [expression for variable in iterable]\n",
    "df_crsp.columns = [c.lower() for c in cols]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.045328,
     "end_time": "2021-01-21T14:11:22.480623",
     "exception": false,
     "start_time": "2021-01-21T14:11:22.435295",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "[HERE](http://www.learnbyexample.org/python-list-comprehension/) for more details on list comprehension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "papermill": {
     "duration": 0.062646,
     "end_time": "2021-01-21T14:11:22.596895",
     "exception": false,
     "start_time": "2021-01-21T14:11:22.534249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1033173 entries, 0 to 1033172\n",
      "Data columns (total 9 columns):\n",
      " #   Column  Non-Null Count    Dtype         \n",
      "---  ------  --------------    -----         \n",
      " 0   permno  1033173 non-null  int64         \n",
      " 1   date    1033173 non-null  datetime64[ns]\n",
      " 2   siccd   1026803 non-null  float64       \n",
      " 3   prc     1013647 non-null  float64       \n",
      " 4   ret     1006985 non-null  float64       \n",
      " 5   shrout  1026302 non-null  float64       \n",
      " 6   spread  27865 non-null    float64       \n",
      " 7   vwretd  1033173 non-null  float64       \n",
      " 8   ewretd  1033173 non-null  float64       \n",
      "dtypes: datetime64[ns](1), float64(7), int64(1)\n",
      "memory usage: 70.9 MB\n"
     ]
    }
   ],
   "source": [
    "df_crsp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.046857,
     "end_time": "2021-01-21T14:11:22.692153",
     "exception": false,
     "start_time": "2021-01-21T14:11:22.645296",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now date variable name is in lowercase and of type datetime64."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "papermill": {
     "duration": 0.063813,
     "end_time": "2021-01-21T14:11:22.802799",
     "exception": false,
     "start_time": "2021-01-21T14:11:22.738986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>date</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10001</td>\n",
       "      <td>2009-01-30</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.502</td>\n",
       "      <td>0.034140</td>\n",
       "      <td>4297.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.077475</td>\n",
       "      <td>-0.024042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10001</td>\n",
       "      <td>2009-02-27</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.940</td>\n",
       "      <td>0.056222</td>\n",
       "      <td>4297.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.100175</td>\n",
       "      <td>-0.107606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10001</td>\n",
       "      <td>2009-03-31</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.180</td>\n",
       "      <td>-0.080537</td>\n",
       "      <td>4300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.086813</td>\n",
       "      <td>0.107474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10001</td>\n",
       "      <td>2009-04-30</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.500</td>\n",
       "      <td>0.044621</td>\n",
       "      <td>4300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.109483</td>\n",
       "      <td>0.192762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10001</td>\n",
       "      <td>2009-05-29</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.480</td>\n",
       "      <td>0.002941</td>\n",
       "      <td>4354.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.067797</td>\n",
       "      <td>0.102330</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   permno       date   siccd    prc       ret  shrout  spread    vwretd  \\\n",
       "0   10001 2009-01-30  4920.0  8.502  0.034140  4297.0     NaN -0.077475   \n",
       "1   10001 2009-02-27  4920.0  8.940  0.056222  4297.0     NaN -0.100175   \n",
       "2   10001 2009-03-31  4920.0  8.180 -0.080537  4300.0     NaN  0.086813   \n",
       "3   10001 2009-04-30  4920.0  8.500  0.044621  4300.0     NaN  0.109483   \n",
       "4   10001 2009-05-29  4920.0  8.480  0.002941  4354.0     NaN  0.067797   \n",
       "\n",
       "     ewretd  \n",
       "0 -0.024042  \n",
       "1 -0.107606  \n",
       "2  0.107474  \n",
       "3  0.192762  \n",
       "4  0.102330  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crsp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.046105,
     "end_time": "2021-01-21T14:11:22.895797",
     "exception": false,
     "start_time": "2021-01-21T14:11:22.849692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Notice that \"c\" is now NaN (i.e., Not a Number) - this is Python's way of representing missing value."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.047729,
     "end_time": "2021-01-21T14:11:22.990911",
     "exception": false,
     "start_time": "2021-01-21T14:11:22.943182",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Exploring the distributional characteristics of our variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "papermill": {
     "duration": 0.565702,
     "end_time": "2021-01-21T14:11:23.609261",
     "exception": false,
     "start_time": "2021-01-21T14:11:23.043559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.033173e+06</td>\n",
       "      <td>1.026803e+06</td>\n",
       "      <td>1.013647e+06</td>\n",
       "      <td>1.006985e+06</td>\n",
       "      <td>1.026302e+06</td>\n",
       "      <td>27865.000000</td>\n",
       "      <td>1.033173e+06</td>\n",
       "      <td>1.033173e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>6.038065e+04</td>\n",
       "      <td>5.818966e+03</td>\n",
       "      <td>5.950448e+01</td>\n",
       "      <td>1.215098e-02</td>\n",
       "      <td>9.756848e+04</td>\n",
       "      <td>0.578258</td>\n",
       "      <td>1.214390e-02</td>\n",
       "      <td>1.226344e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.370057e+04</td>\n",
       "      <td>2.217899e+03</td>\n",
       "      <td>2.594325e+03</td>\n",
       "      <td>1.573849e-01</td>\n",
       "      <td>3.703394e+05</td>\n",
       "      <td>3.714150</td>\n",
       "      <td>4.422972e-02</td>\n",
       "      <td>5.223411e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000100e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-5.886000e+02</td>\n",
       "      <td>-9.936000e-01</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>0.000700</td>\n",
       "      <td>-1.417330e-01</td>\n",
       "      <td>-2.075010e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.670400e+04</td>\n",
       "      <td>3.840000e+03</td>\n",
       "      <td>7.620000e+00</td>\n",
       "      <td>-4.276600e-02</td>\n",
       "      <td>8.350000e+03</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>-1.041000e-02</td>\n",
       "      <td>-1.138800e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.947200e+04</td>\n",
       "      <td>6.726000e+03</td>\n",
       "      <td>1.853000e+01</td>\n",
       "      <td>6.452000e-03</td>\n",
       "      <td>2.702300e+04</td>\n",
       "      <td>0.170000</td>\n",
       "      <td>1.426900e-02</td>\n",
       "      <td>1.073600e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.001200e+04</td>\n",
       "      <td>6.726000e+03</td>\n",
       "      <td>3.784000e+01</td>\n",
       "      <td>5.504200e-02</td>\n",
       "      <td>7.114600e+04</td>\n",
       "      <td>0.440000</td>\n",
       "      <td>3.751400e-02</td>\n",
       "      <td>3.888400e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.343600e+04</td>\n",
       "      <td>9.999000e+03</td>\n",
       "      <td>3.478150e+05</td>\n",
       "      <td>1.988359e+01</td>\n",
       "      <td>2.920640e+07</td>\n",
       "      <td>475.000000</td>\n",
       "      <td>1.296770e-01</td>\n",
       "      <td>1.927620e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             permno         siccd           prc           ret        shrout  \\\n",
       "count  1.033173e+06  1.026803e+06  1.013647e+06  1.006985e+06  1.026302e+06   \n",
       "mean   6.038065e+04  5.818966e+03  5.950448e+01  1.215098e-02  9.756848e+04   \n",
       "std    3.370057e+04  2.217899e+03  2.594325e+03  1.573849e-01  3.703394e+05   \n",
       "min    1.000100e+04  0.000000e+00 -5.886000e+02 -9.936000e-01  2.000000e+00   \n",
       "25%    1.670400e+04  3.840000e+03  7.620000e+00 -4.276600e-02  8.350000e+03   \n",
       "50%    7.947200e+04  6.726000e+03  1.853000e+01  6.452000e-03  2.702300e+04   \n",
       "75%    9.001200e+04  6.726000e+03  3.784000e+01  5.504200e-02  7.114600e+04   \n",
       "max    9.343600e+04  9.999000e+03  3.478150e+05  1.988359e+01  2.920640e+07   \n",
       "\n",
       "             spread        vwretd        ewretd  \n",
       "count  27865.000000  1.033173e+06  1.033173e+06  \n",
       "mean       0.578258  1.214390e-02  1.226344e-02  \n",
       "std        3.714150  4.422972e-02  5.223411e-02  \n",
       "min        0.000700 -1.417330e-01 -2.075010e-01  \n",
       "25%        0.080000 -1.041000e-02 -1.138800e-02  \n",
       "50%        0.170000  1.426900e-02  1.073600e-02  \n",
       "75%        0.440000  3.751400e-02  3.888400e-02  \n",
       "max      475.000000  1.296770e-01  1.927620e-01  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crsp.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.046288,
     "end_time": "2021-01-21T14:11:23.702271",
     "exception": false,
     "start_time": "2021-01-21T14:11:23.655983",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Notice that Prc (or Price) has 'negative' values. What is going on? The documentation says a dash prefixes the price when no closing price is available for that period and when the bid/ask average is used. We will take the absolute value of the price, which is sensible in most cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "papermill": {
     "duration": 0.168979,
     "end_time": "2021-01-21T14:11:23.919044",
     "exception": false,
     "start_time": "2021-01-21T14:11:23.750065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Sanitize dataset\n",
    "\n",
    "# Drop observations with missing returns\n",
    "df_crsp = df_crsp[df_crsp.ret.notnull()]\n",
    "\n",
    "# Take the absolute value of the price\n",
    "df_crsp[\"prc\"] = np.abs(df_crsp[\"prc\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "papermill": {
     "duration": 0.475591,
     "end_time": "2021-01-21T14:11:24.442285",
     "exception": false,
     "start_time": "2021-01-21T14:11:23.966694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Set the index (to select easily on date)\n",
    "df_crsp = df_crsp.set_index(\"date\")\n",
    "df_crsp = df_crsp.sort_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.04789,
     "end_time": "2021-01-21T14:11:24.537899",
     "exception": false,
     "start_time": "2021-01-21T14:11:24.490009",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "[HERE](https://www.geeksforgeeks.org/python-pandas-dataframe-set_index/) for more details on on Pandas indexing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "papermill": {
     "duration": 0.276266,
     "end_time": "2021-01-21T14:11:24.861365",
     "exception": false,
     "start_time": "2021-01-21T14:11:24.585099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compute continuously compounded returns (i.e. log returns).\n",
    "df_crsp[\"lret\"] = np.log(1 + df_crsp[\"ret\"])\n",
    "df_crsp[\"lvwretd\"] = np.log(1 + df_crsp[\"vwretd\"])\n",
    "df_crsp[\"lewretd\"] = np.log(1 + df_crsp[\"ewretd\"])\n",
    "\n",
    "# Compute the market cap\n",
    "df_crsp[\"size\"] = df_crsp[\"shrout\"] * df_crsp[\"prc\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049381,
     "end_time": "2021-01-21T14:11:24.958383",
     "exception": false,
     "start_time": "2021-01-21T14:11:24.909002",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** Why are continously compounded returns (i.e., log returns) useful?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "papermill": {
     "duration": 0.064784,
     "end_time": "2021-01-21T14:11:25.070492",
     "exception": false,
     "start_time": "2021-01-21T14:11:25.005708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2009-01-30</th>\n",
       "      <td>10001</td>\n",
       "      <td>4920.0</td>\n",
       "      <td>8.502</td>\n",
       "      <td>0.034140</td>\n",
       "      <td>4297.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.077475</td>\n",
       "      <td>-0.024042</td>\n",
       "      <td>0.033570</td>\n",
       "      <td>-0.080641</td>\n",
       "      <td>-0.024336</td>\n",
       "      <td>36533.094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-01-30</th>\n",
       "      <td>67467</td>\n",
       "      <td>5331.0</td>\n",
       "      <td>13.450</td>\n",
       "      <td>-0.071774</td>\n",
       "      <td>82117.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.077475</td>\n",
       "      <td>-0.024042</td>\n",
       "      <td>-0.074480</td>\n",
       "      <td>-0.080641</td>\n",
       "      <td>-0.024336</td>\n",
       "      <td>1104473.650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-01-30</th>\n",
       "      <td>90565</td>\n",
       "      <td>4899.0</td>\n",
       "      <td>13.560</td>\n",
       "      <td>0.135678</td>\n",
       "      <td>68432.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.077475</td>\n",
       "      <td>-0.024042</td>\n",
       "      <td>0.127230</td>\n",
       "      <td>-0.080641</td>\n",
       "      <td>-0.024336</td>\n",
       "      <td>927937.920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-01-30</th>\n",
       "      <td>92590</td>\n",
       "      <td>4841.0</td>\n",
       "      <td>18.350</td>\n",
       "      <td>0.049771</td>\n",
       "      <td>493269.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.077475</td>\n",
       "      <td>-0.024042</td>\n",
       "      <td>0.048572</td>\n",
       "      <td>-0.080641</td>\n",
       "      <td>-0.024336</td>\n",
       "      <td>9051486.150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-01-30</th>\n",
       "      <td>84073</td>\n",
       "      <td>6331.0</td>\n",
       "      <td>28.040</td>\n",
       "      <td>-0.095977</td>\n",
       "      <td>37254.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.077475</td>\n",
       "      <td>-0.024042</td>\n",
       "      <td>-0.100900</td>\n",
       "      <td>-0.080641</td>\n",
       "      <td>-0.024336</td>\n",
       "      <td>1044602.160</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            permno   siccd     prc       ret    shrout  spread    vwretd  \\\n",
       "date                                                                       \n",
       "2009-01-30   10001  4920.0   8.502  0.034140    4297.0     NaN -0.077475   \n",
       "2009-01-30   67467  5331.0  13.450 -0.071774   82117.0     NaN -0.077475   \n",
       "2009-01-30   90565  4899.0  13.560  0.135678   68432.0     NaN -0.077475   \n",
       "2009-01-30   92590  4841.0  18.350  0.049771  493269.0     NaN -0.077475   \n",
       "2009-01-30   84073  6331.0  28.040 -0.095977   37254.0     NaN -0.077475   \n",
       "\n",
       "              ewretd      lret   lvwretd   lewretd         size  \n",
       "date                                                             \n",
       "2009-01-30 -0.024042  0.033570 -0.080641 -0.024336    36533.094  \n",
       "2009-01-30 -0.024042 -0.074480 -0.080641 -0.024336  1104473.650  \n",
       "2009-01-30 -0.024042  0.127230 -0.080641 -0.024336   927937.920  \n",
       "2009-01-30 -0.024042  0.048572 -0.080641 -0.024336  9051486.150  \n",
       "2009-01-30 -0.024042 -0.100900 -0.080641 -0.024336  1044602.160  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_crsp.head()\n",
    "# df_crsp.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "papermill": {
     "duration": 0.288867,
     "end_time": "2021-01-21T14:11:25.407193",
     "exception": false,
     "start_time": "2021-01-21T14:11:25.118326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Total market size over time\n",
    "\n",
    "ax = df_crsp.groupby([\"date\"])[\"size\"].sum().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "papermill": {
     "duration": 0.555344,
     "end_time": "2021-01-21T14:11:26.011730",
     "exception": false,
     "start_time": "2021-01-21T14:11:25.456386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x144b4acb910>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Taking the log of market size\n",
    "ax = df_crsp.groupby([\"date\"])[\"size\"].sum().plot(logy=True)\n",
    "\n",
    "# Add some informative lines\n",
    "ax.axvline(x=datetime(1929, 10, 24), color=\"k\", linestyle=\":\")  # Black Monday\n",
    "ax.axvline(x=datetime(1987, 10, 19), color=\"k\", linestyle=\":\")  # Black Monday again"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049391,
     "end_time": "2021-01-21T14:11:26.111493",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.062102",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's configure the parameters of our model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.050733,
     "end_time": "2021-01-21T14:11:26.212571",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.161838",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-two-three\"></a>\n",
    "## 2.3 Generate the portfolio formation dates for our sample (Key idea #1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "papermill": {
     "duration": 0.057071,
     "end_time": "2021-01-21T14:11:26.319758",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.262687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "form_period = 36  # 36 Formation period, in month\n",
    "start_date = \"2012-01-01\"\n",
    "end_date = \"2020-12-31\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "papermill": {
     "duration": 0.062966,
     "end_time": "2021-01-21T14:11:26.432259",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.369293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sekso\\AppData\\Local\\Temp/ipykernel_21252/724698719.py:7: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  start=start_date, end=end_date, freq=str(np.int(form_period)) + \"M\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2012-01-31', '2015-01-31', '2018-01-31'], dtype='datetime64[ns]', freq='36M')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the dates of portfolio formation.\n",
    "# The frequency tells how far apart to put the dates.\n",
    "# 'M' stand for month, 'MS' is for month start, to make sure we\n",
    "# have first day of the month. It needs to be a string, so we convert\n",
    "# our numbers to string.\n",
    "dates = pd.date_range(\n",
    "    start=start_date, end=end_date, freq=str(np.int(form_period)) + \"M\"\n",
    ")\n",
    "dates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049986,
     "end_time": "2021-01-21T14:11:26.532331",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.482345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "[HERE](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases) for more details on the various options to tell how far apart to put the dates.  \n",
    "[HERE](https://www.geeksforgeeks.org/python-pandas-date_range-method/) for more details on the date_range method in Pandas.\n",
    "\n",
    "** Why do we need the dates of portfolio formation for?  \n",
    "This datetime object is an essential input for the two core functions: the function that contructs loser/winner portfolios and the function that calculates holding period returns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049711,
     "end_time": "2021-01-21T14:11:26.632092",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.582381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"section-three\"></a>\n",
    "# 3. TESTING OVERREACTION HYPOTHESIS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049693,
     "end_time": "2021-01-21T14:11:26.731968",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.682275",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-three-one\"></a>\n",
    "## 3.1 Question 1: How do we construct portfolios?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.04963,
     "end_time": "2021-01-21T14:11:26.831396",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.781766",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For each portfolio formation date (listed in previous step), we are going to form portfolios based on past performance. Specifically, a stock's past performance is its cumulative return during the formation period before the formation date. Then, we will track the performance of the top and bottom performing portfolios, which we identify during the formation period, over the holding period."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049863,
     "end_time": "2021-01-21T14:11:26.931000",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.881137",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-three-one-one\"></a>\n",
    "## 3.1.1 Constructing portfolios on a single-date (1 instance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.050093,
     "end_time": "2021-01-21T14:11:27.031492",
     "exception": false,
     "start_time": "2021-01-21T14:11:26.981399",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's specify the model parameters for portfolio on a single-date (before we generalize later)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "papermill": {
     "duration": 0.057068,
     "end_time": "2021-01-21T14:11:27.138767",
     "exception": false,
     "start_time": "2021-01-21T14:11:27.081699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "form_period = 36  # 36 Formation period, in month\n",
    "n_stocks = 35  # Number of stocks in the top and bottom performance\n",
    "benchmark = \"ewretd\"  # Benchmark market return to use ('vwretd' or 'ewretd')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "papermill": {
     "duration": 0.078126,
     "end_time": "2021-01-21T14:11:27.268238",
     "exception": false,
     "start_time": "2021-01-21T14:11:27.190112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2012-01-31 00:00:00\n",
      "2009-01-31 00:00:00 2011-12-31 00:00:00\n"
     ]
    }
   ],
   "source": [
    "# Let's first do it for only one date.\n",
    "date = dates[0]\n",
    "print(dates[0])\n",
    "\n",
    "beg_dt = date - pd.offsets.MonthEnd(1) * form_period\n",
    "print(beg_dt, date - pd.offsets.MonthEnd(1))\n",
    "# Select obs for the formation period\n",
    "# crsp_t = df_crsp[beg_dt:date].copy()\n",
    "crsp_t = df_crsp[beg_dt : (date - pd.offsets.MonthEnd(1))].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.051176,
     "end_time": "2021-01-21T14:11:27.371074",
     "exception": false,
     "start_time": "2021-01-21T14:11:27.319898",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "[HERE](https://www.w3resource.com/pandas/series/series-dt-to_pydatetime.php) for more details on the to_pydatetime() method in Pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "papermill": {
     "duration": 0.078355,
     "end_time": "2021-01-21T14:11:27.500420",
     "exception": false,
     "start_time": "2021-01-21T14:11:27.422065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2009-02-27</th>\n",
       "      <td>80485</td>\n",
       "      <td>2830.0</td>\n",
       "      <td>4.03</td>\n",
       "      <td>-0.179226</td>\n",
       "      <td>69667.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.100175</td>\n",
       "      <td>-0.107606</td>\n",
       "      <td>-0.197507</td>\n",
       "      <td>-0.105555</td>\n",
       "      <td>-0.113848</td>\n",
       "      <td>280758.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-02-27</th>\n",
       "      <td>89403</td>\n",
       "      <td>4941.0</td>\n",
       "      <td>19.92</td>\n",
       "      <td>-0.081181</td>\n",
       "      <td>29385.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.100175</td>\n",
       "      <td>-0.107606</td>\n",
       "      <td>-0.084666</td>\n",
       "      <td>-0.105555</td>\n",
       "      <td>-0.113848</td>\n",
       "      <td>585349.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-02-27</th>\n",
       "      <td>92740</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>15.20</td>\n",
       "      <td>-0.044326</td>\n",
       "      <td>200.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>-0.100175</td>\n",
       "      <td>-0.107606</td>\n",
       "      <td>-0.045338</td>\n",
       "      <td>-0.105555</td>\n",
       "      <td>-0.113848</td>\n",
       "      <td>3040.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-02-27</th>\n",
       "      <td>88742</td>\n",
       "      <td>4813.0</td>\n",
       "      <td>21.15</td>\n",
       "      <td>-0.132486</td>\n",
       "      <td>23625.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.100175</td>\n",
       "      <td>-0.107606</td>\n",
       "      <td>-0.142124</td>\n",
       "      <td>-0.105555</td>\n",
       "      <td>-0.113848</td>\n",
       "      <td>499668.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-02-27</th>\n",
       "      <td>88820</td>\n",
       "      <td>6798.0</td>\n",
       "      <td>15.65</td>\n",
       "      <td>-0.288636</td>\n",
       "      <td>8299.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.100175</td>\n",
       "      <td>-0.107606</td>\n",
       "      <td>-0.340571</td>\n",
       "      <td>-0.105555</td>\n",
       "      <td>-0.113848</td>\n",
       "      <td>129879.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-12-30</th>\n",
       "      <td>92336</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>108.23</td>\n",
       "      <td>0.017422</td>\n",
       "      <td>900.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.003671</td>\n",
       "      <td>-0.003561</td>\n",
       "      <td>0.017272</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>-0.003567</td>\n",
       "      <td>97407.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-12-30</th>\n",
       "      <td>81541</td>\n",
       "      <td>6035.0</td>\n",
       "      <td>17.10</td>\n",
       "      <td>0.007067</td>\n",
       "      <td>54664.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.003671</td>\n",
       "      <td>-0.003561</td>\n",
       "      <td>0.007042</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>-0.003567</td>\n",
       "      <td>934754.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-12-30</th>\n",
       "      <td>92490</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>34.76</td>\n",
       "      <td>-0.033912</td>\n",
       "      <td>35400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.003671</td>\n",
       "      <td>-0.003561</td>\n",
       "      <td>-0.034500</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>-0.003567</td>\n",
       "      <td>1230504.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-12-30</th>\n",
       "      <td>77090</td>\n",
       "      <td>4813.0</td>\n",
       "      <td>39.05</td>\n",
       "      <td>-0.051208</td>\n",
       "      <td>15383.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.003671</td>\n",
       "      <td>-0.003561</td>\n",
       "      <td>-0.052566</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>-0.003567</td>\n",
       "      <td>600706.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011-12-30</th>\n",
       "      <td>89901</td>\n",
       "      <td>1311.0</td>\n",
       "      <td>46.69</td>\n",
       "      <td>0.003870</td>\n",
       "      <td>117381.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.003671</td>\n",
       "      <td>-0.003561</td>\n",
       "      <td>0.003863</td>\n",
       "      <td>0.003664</td>\n",
       "      <td>-0.003567</td>\n",
       "      <td>5480518.89</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>230324 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            permno   siccd     prc       ret    shrout  spread    vwretd  \\\n",
       "date                                                                       \n",
       "2009-02-27   80485  2830.0    4.03 -0.179226   69667.0     NaN -0.100175   \n",
       "2009-02-27   89403  4941.0   19.92 -0.081181   29385.0     NaN -0.100175   \n",
       "2009-02-27   92740  6726.0   15.20 -0.044326     200.0     4.0 -0.100175   \n",
       "2009-02-27   88742  4813.0   21.15 -0.132486   23625.0     NaN -0.100175   \n",
       "2009-02-27   88820  6798.0   15.65 -0.288636    8299.0     NaN -0.100175   \n",
       "...            ...     ...     ...       ...       ...     ...       ...   \n",
       "2011-12-30   92336  6726.0  108.23  0.017422     900.0     NaN  0.003671   \n",
       "2011-12-30   81541  6035.0   17.10  0.007067   54664.0     NaN  0.003671   \n",
       "2011-12-30   92490  6726.0   34.76 -0.033912   35400.0     NaN  0.003671   \n",
       "2011-12-30   77090  4813.0   39.05 -0.051208   15383.0     NaN  0.003671   \n",
       "2011-12-30   89901  1311.0   46.69  0.003870  117381.0     NaN  0.003671   \n",
       "\n",
       "              ewretd      lret   lvwretd   lewretd        size  \n",
       "date                                                            \n",
       "2009-02-27 -0.107606 -0.197507 -0.105555 -0.113848   280758.01  \n",
       "2009-02-27 -0.107606 -0.084666 -0.105555 -0.113848   585349.20  \n",
       "2009-02-27 -0.107606 -0.045338 -0.105555 -0.113848     3040.00  \n",
       "2009-02-27 -0.107606 -0.142124 -0.105555 -0.113848   499668.75  \n",
       "2009-02-27 -0.107606 -0.340571 -0.105555 -0.113848   129879.35  \n",
       "...              ...       ...       ...       ...         ...  \n",
       "2011-12-30 -0.003561  0.017272  0.003664 -0.003567    97407.00  \n",
       "2011-12-30 -0.003561  0.007042  0.003664 -0.003567   934754.40  \n",
       "2011-12-30 -0.003561 -0.034500  0.003664 -0.003567  1230504.00  \n",
       "2011-12-30 -0.003561 -0.052566  0.003664 -0.003567   600706.15  \n",
       "2011-12-30 -0.003561  0.003863  0.003664 -0.003567  5480518.89  \n",
       "\n",
       "[230324 rows x 12 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crsp_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "papermill": {
     "duration": 0.066245,
     "end_time": "2021-01-21T14:11:27.618463",
     "exception": false,
     "start_time": "2021-01-21T14:11:27.552218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# We only want to keep stocks that are there during the full formation window\n",
    "\n",
    "crsp_t['N'] = crsp_t.groupby(['permno'])['permno'].transform('count')\n",
    "\n",
    "# Filter on number of observations. We only keep sotcks for which we have returns\n",
    "# over the full observation period.\n",
    "crsp_t = crsp_t[crsp_t['N'] >= form_period]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.050753,
     "end_time": "2021-01-21T14:11:27.720792",
     "exception": false,
     "start_time": "2021-01-21T14:11:27.670039",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "[HERE](https://pbpython.com/pandas_transform.html) for more details on the transform method in Pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "papermill": {
     "duration": 0.063181,
     "end_time": "2021-01-21T14:11:27.835230",
     "exception": false,
     "start_time": "2021-01-21T14:11:27.772049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Now for each stock we want to compute the full period return.\n",
    "stock_ret = crsp_t.groupby('permno')[['lret', 'lvwretd', 'lewretd']].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "papermill": {
     "duration": 0.065356,
     "end_time": "2021-01-21T14:11:27.953781",
     "exception": false,
     "start_time": "2021-01-21T14:11:27.888425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>permno</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [lret, lvwretd, lewretd]\n",
       "Index: []"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stock_ret.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "papermill": {
     "duration": 0.061738,
     "end_time": "2021-01-21T14:11:28.067627",
     "exception": false,
     "start_time": "2021-01-21T14:11:28.005889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Next compute excess returns based on the chosen index.\n",
    "# Note that since the benchmark is the same for all stocks, we could use\n",
    "# actual returns for ranking purposes. It would only make a difference in some\n",
    "### cases. Which ones?\n",
    "\n",
    "stock_ret['lexret'] = stock_ret['lret'] - stock_ret['l' + benchmark]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "papermill": {
     "duration": 0.065761,
     "end_time": "2021-01-21T14:11:28.185817",
     "exception": false,
     "start_time": "2021-01-21T14:11:28.120056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Now rankings.\n",
    "\n",
    "stock_ret['rank_asc'] = stock_ret['lexret'].rank() # (1 = worst return)\n",
    "stock_ret['rank_inv'] = stock_ret['lexret'].rank(ascending=False) # (1= best return)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "papermill": {
     "duration": 0.071072,
     "end_time": "2021-01-21T14:11:28.309390",
     "exception": false,
     "start_time": "2021-01-21T14:11:28.238318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "      <th>lexret</th>\n",
       "      <th>rank_asc</th>\n",
       "      <th>rank_inv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>permno</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [lret, lvwretd, lewretd, lexret, rank_asc, rank_inv]\n",
       "Index: []"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stock_ret"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.053748,
     "end_time": "2021-01-21T14:11:28.417927",
     "exception": false,
     "start_time": "2021-01-21T14:11:28.364179",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** rank_asc + rank_inv should give us the total number of securities for a formation date, why is it not the case?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "papermill": {
     "duration": 0.076581,
     "end_time": "2021-01-21T14:11:28.577835",
     "exception": false,
     "start_time": "2021-01-21T14:11:28.501254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Assign stock to top or bottom portfolio\n",
    "\n",
    "top_portfolio = stock_ret[stock_ret.rank_inv <= n_stocks].reset_index()[['permno', 'lexret']]\n",
    "bottom_portfolio = stock_ret[stock_ret.rank_asc <= n_stocks].reset_index()[['permno', 'lexret']]\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.053483,
     "end_time": "2021-01-21T14:11:28.701420",
     "exception": false,
     "start_time": "2021-01-21T14:11:28.647937",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** why do we set index on permno and log excess returns?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "papermill": {
     "duration": 0.072342,
     "end_time": "2021-01-21T14:11:28.826985",
     "exception": false,
     "start_time": "2021-01-21T14:11:28.754643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>lexret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [permno, lexret]\n",
       "Index: []"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_portfolio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "papermill": {
     "duration": 0.065961,
     "end_time": "2021-01-21T14:11:28.953491",
     "exception": false,
     "start_time": "2021-01-21T14:11:28.887530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>lexret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [permno, lexret]\n",
       "Index: []"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bottom_portfolio.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.053467,
     "end_time": "2021-01-21T14:11:29.061949",
     "exception": false,
     "start_time": "2021-01-21T14:11:29.008482",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-three-one-two\"></a>\n",
    "## 3.1.2 Constructing portfolios on each date (N instances) with a function (Key idea #2)\n",
    "\n",
    "Now that we have the code working for one date, we need to run it on each date. Now it's time to generate generalize from 1 instance to N instances with a function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_performance_portfolios(\n",
    "    date, df, form_period=36, n_stocks=35, benchmark=\"ewretd\", partition=\"permno\"\n",
    "):\n",
    "    \"\"\"\n",
    "    Function computes the performance portfolios, separated into bottom and top performing portfolios\n",
    "    \n",
    "    Parameters:\n",
    "        date (np.datetime): The date at which to start looking\n",
    "        df (pandas.DataFrame): dataframe source \n",
    "        form_period (int): the number of months used to lookback and form the portfolio\n",
    "        n_stocks (int): the number of stocks to form the portfolio \n",
    "        benchmark (str): the benchmark used, either value weighted or equal weighted. See column name in df\n",
    "        partition (str): type of partition to be used\n",
    "    Returns:\n",
    "        tuple: tuple containing the bottom and top portfolios\n",
    "    \"\"\"\n",
    "    beg_dt = (\n",
    "        date - pd.offsets.MonthEnd(1) * form_period\n",
    "    )  # find 36months before the first date\n",
    "    end_dt = date - pd.offsets.MonthEnd(1)\n",
    "    # Select obs for the formation period\n",
    "    crsp_t = df[beg_dt:end_dt].copy()\n",
    "    # We only want to keep stocks that are there during the full formation window\n",
    "    crsp_t[\"N\"] = crsp_t.groupby([partition])[partition].transform(\"count\")\n",
    "    max_form = max(crsp_t[\"N\"])\n",
    "\n",
    "    # Filter on number of observations. We only keep stocks for which we have returns\n",
    "    # over the full observation period.\n",
    "    crsp_t = crsp_t[crsp_t[\"N\"] >= form_period]\n",
    "    if len(crsp_t) == 0:\n",
    "        end_dt = date + pd.offsets.MonthBegin(1)\n",
    "        crsp_t = df[beg_dt:end_dt].copy()\n",
    "        crsp_t[\"N\"] = crsp_t.groupby([partition])[partition].transform(\"count\")\n",
    "        crsp_t = crsp_t[crsp_t[\"N\"] >= form_period]\n",
    "\n",
    "    # Now for each stock we want to compute the full period return. Easy with log returns, just sum up!\n",
    "    stock_ret = crsp_t.groupby(partition)[[\"lret\", \"lvwretd\", \"lewretd\"]].sum()\n",
    "\n",
    "    # Next compute excess returns based on the chosen index.\n",
    "    # Note that since the benchmark is the same for all stocks, we could use\n",
    "    # actual returns for ranking purposes.\n",
    "    stock_ret[\"lexret\"] = stock_ret[\"lret\"] - stock_ret[\"l\" + benchmark]\n",
    "\n",
    "    # Now rankings.\n",
    "    stock_ret[\"rank_asc\"] = stock_ret[\"lexret\"].rank()  # (1 = worst return)\n",
    "    stock_ret[\"rank_inv\"] = stock_ret[\"lexret\"].rank(\n",
    "        ascending=False\n",
    "    )  # (1= best return)\n",
    "\n",
    "    # Assign stock to top or bottom portfolio\n",
    "    top_portfolio = stock_ret[stock_ret.rank_inv <= n_stocks].reset_index()[\n",
    "        [partition, \"lexret\"]\n",
    "    ]\n",
    "    bottom_portfolio = stock_ret[stock_ret.rank_asc <= n_stocks].reset_index()[\n",
    "        [partition, \"lexret\"]\n",
    "    ]\n",
    "\n",
    "    return (bottom_portfolio, top_portfolio)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.053947,
     "end_time": "2021-01-21T14:11:29.290287",
     "exception": false,
     "start_time": "2021-01-21T14:11:29.236340",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** What do the arguments date, df, form_period, n_stocks, and benchmark contain?  \n",
    "** What object type does the function returns with \"(bottom_portfolio, top_portfolio)\"?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.053844,
     "end_time": "2021-01-21T14:11:29.399226",
     "exception": false,
     "start_time": "2021-01-21T14:11:29.345382",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "[HERE](http://https://www.w3schools.com/python/python_tuples.asp) for more details on Python Tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "papermill": {
     "duration": 0.637982,
     "end_time": "2021-01-21T14:11:30.091458",
     "exception": false,
     "start_time": "2021-01-21T14:11:29.453476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "portfolios = {}\n",
    "for date in dates:\n",
    "    portfolios[date] = compute_performance_portfolios(date, df_crsp, benchmark=\"ewretd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.055297,
     "end_time": "2021-01-21T14:11:30.201552",
     "exception": false,
     "start_time": "2021-01-21T14:11:30.146255",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** What is this line of code \"portfolios = {}\" for?  \n",
    "** What does dictionary \"portfolios contain?  \n",
    "** What is the key of the dictionary \"portfolios?  \n",
    "** What are the values that each key in the dictionary \"portfolios?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "papermill": {
     "duration": 0.063663,
     "end_time": "2021-01-21T14:11:30.320318",
     "exception": false,
     "start_time": "2021-01-21T14:11:30.256655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(portfolios)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "papermill": {
     "duration": 0.063569,
     "end_time": "2021-01-21T14:11:30.438684",
     "exception": false,
     "start_time": "2021-01-21T14:11:30.375115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys([Timestamp('2012-01-31 00:00:00', freq='36M'), Timestamp('2015-01-31 00:00:00', freq='36M'), Timestamp('2018-01-31 00:00:00', freq='36M')])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolios.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.174445,
     "end_time": "2021-01-21T14:11:30.675258",
     "exception": false,
     "start_time": "2021-01-21T14:11:30.500813",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Check out the values associated with each dictionary key with \"portfolios.values()\" -- Warning long output, but useful to understand the data structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "papermill": {
     "duration": 0.06993,
     "end_time": "2021-01-21T14:11:30.802475",
     "exception": false,
     "start_time": "2021-01-21T14:11:30.732545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>lexret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11182</td>\n",
       "      <td>-4.299902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12500</td>\n",
       "      <td>-10.819978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12579</td>\n",
       "      <td>-4.543111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13013</td>\n",
       "      <td>-8.155369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13030</td>\n",
       "      <td>-7.517432</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   permno     lexret\n",
       "0   11182  -4.299902\n",
       "1   12500 -10.819978\n",
       "2   12579  -4.543111\n",
       "3   13013  -8.155369\n",
       "4   13030  -7.517432"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolios[date][0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "papermill": {
     "duration": 0.076122,
     "end_time": "2021-01-21T14:11:30.935729",
     "exception": false,
     "start_time": "2021-01-21T14:11:30.859607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>lexret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10966</td>\n",
       "      <td>1.816982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12226</td>\n",
       "      <td>1.484895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12339</td>\n",
       "      <td>1.572539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12497</td>\n",
       "      <td>1.453154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13933</td>\n",
       "      <td>1.590277</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   permno    lexret\n",
       "0   10966  1.816982\n",
       "1   12226  1.484895\n",
       "2   12339  1.572539\n",
       "3   12497  1.453154\n",
       "4   13933  1.590277"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolios[date][1].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.058161,
     "end_time": "2021-01-21T14:11:31.052150",
     "exception": false,
     "start_time": "2021-01-21T14:11:30.993989",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-three-two\"></a>\n",
    "## 3.2 Question 2: How do we construct holding period returns?\n",
    "\n",
    "Next, we want to compute cumulative abnormal returns for portfolios during the holding period. First, we do it for one portfolio/date, then we generalize it with a function for each portfolio/date."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.058074,
     "end_time": "2021-01-21T14:11:31.168397",
     "exception": false,
     "start_time": "2021-01-21T14:11:31.110323",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-three-two-one\"></a>\n",
    "## 3.2.1 Constructing portfolios on a single portfolio/date (1 instance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "papermill": {
     "duration": 0.066234,
     "end_time": "2021-01-21T14:11:31.293352",
     "exception": false,
     "start_time": "2021-01-21T14:11:31.227118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "date = dates[0]\n",
    "portfolio = portfolios[date][0] # Bottom portfolio.\n",
    "\n",
    "hold_period = 36 # Holding period, in months\n",
    "benchmark = 'ewretd' # 'vwretd' or 'ewretd'\n",
    "weighting = 'ew' # 'vw' or 'ew'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "papermill": {
     "duration": 0.06669,
     "end_time": "2021-01-21T14:11:31.418180",
     "exception": false,
     "start_time": "2021-01-21T14:11:31.351490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "portfolio = portfolio.copy()\n",
    "end_dt = date + pd.offsets.MonthBegin(1) * hold_period\n",
    "\n",
    "# Select obs for the formation period\n",
    "crsp_t2 = df_crsp[date:end_dt].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.061744,
     "end_time": "2021-01-21T14:11:31.537733",
     "exception": false,
     "start_time": "2021-01-21T14:11:31.475989",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** To get end_dt, why do we add, instead of minus (like before), pd.offsets.MonthBegin(1) * hold_period?  \n",
    "** Why is it \"crsp_t2 = df_crsp[date:end_dt].copy()\" instead of \"crsp_t = df_crsp[beg_dt:date].copy()\" now?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "papermill": {
     "duration": 0.073654,
     "end_time": "2021-01-21T14:11:31.668927",
     "exception": false,
     "start_time": "2021-01-21T14:11:31.595273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 35 entries, 0 to 34\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   permno  35 non-null     int64  \n",
      " 1   lexret  35 non-null     float64\n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 688.0 bytes\n"
     ]
    }
   ],
   "source": [
    "portfolio.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "papermill": {
     "duration": 0.082329,
     "end_time": "2021-01-21T14:11:31.811950",
     "exception": false,
     "start_time": "2021-01-21T14:11:31.729621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2012-01-31</th>\n",
       "      <td>12856</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>21.162</td>\n",
       "      <td>0.067171</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.054140</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>0.065011</td>\n",
       "      <td>0.052725</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>1058.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-31</th>\n",
       "      <td>79689</td>\n",
       "      <td>3820.0</td>\n",
       "      <td>1.920</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>20594.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.054140</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>0.042559</td>\n",
       "      <td>0.052725</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>39540.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-31</th>\n",
       "      <td>13017</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>80.465</td>\n",
       "      <td>0.008965</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.054140</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>0.008925</td>\n",
       "      <td>0.052725</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>8046.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-31</th>\n",
       "      <td>93283</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>38.890</td>\n",
       "      <td>-0.317000</td>\n",
       "      <td>350.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.054140</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>-0.381260</td>\n",
       "      <td>0.052725</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>13611.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-31</th>\n",
       "      <td>77776</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>22.000</td>\n",
       "      <td>0.072647</td>\n",
       "      <td>22782.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.054140</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>0.070129</td>\n",
       "      <td>0.052725</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>501204.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-31</th>\n",
       "      <td>52396</td>\n",
       "      <td>3714.0</td>\n",
       "      <td>19.790</td>\n",
       "      <td>0.102097</td>\n",
       "      <td>26630.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.003661</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>0.097215</td>\n",
       "      <td>-0.003668</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>527007.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-31</th>\n",
       "      <td>51423</td>\n",
       "      <td>7011.0</td>\n",
       "      <td>18.510</td>\n",
       "      <td>0.124544</td>\n",
       "      <td>18662.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.003661</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>0.117378</td>\n",
       "      <td>-0.003668</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>345433.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-31</th>\n",
       "      <td>89428</td>\n",
       "      <td>6022.0</td>\n",
       "      <td>57.080</td>\n",
       "      <td>-0.079948</td>\n",
       "      <td>1216670.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.003661</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>-0.083325</td>\n",
       "      <td>-0.003668</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>69447523.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-31</th>\n",
       "      <td>90756</td>\n",
       "      <td>3711.0</td>\n",
       "      <td>48.650</td>\n",
       "      <td>0.071586</td>\n",
       "      <td>78128.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.003661</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>0.069140</td>\n",
       "      <td>-0.003668</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>3800927.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-31</th>\n",
       "      <td>12884</td>\n",
       "      <td>9999.0</td>\n",
       "      <td>16.320</td>\n",
       "      <td>0.094251</td>\n",
       "      <td>16026.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.003661</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>0.090070</td>\n",
       "      <td>-0.003668</td>\n",
       "      <td>-0.000181</td>\n",
       "      <td>261544.32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>242802 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            permno   siccd     prc       ret     shrout  spread    vwretd  \\\n",
       "date                                                                        \n",
       "2012-01-31   12856  6726.0  21.162  0.067171       50.0     NaN  0.054140   \n",
       "2012-01-31   79689  3820.0   1.920  0.043478    20594.0     NaN  0.054140   \n",
       "2012-01-31   13017  6726.0  80.465  0.008965      100.0    0.29  0.054140   \n",
       "2012-01-31   93283  6726.0  38.890 -0.317000      350.0     NaN  0.054140   \n",
       "2012-01-31   77776  6726.0  22.000  0.072647    22782.0     NaN  0.054140   \n",
       "...            ...     ...     ...       ...        ...     ...       ...   \n",
       "2014-12-31   52396  3714.0  19.790  0.102097    26630.0     NaN -0.003661   \n",
       "2014-12-31   51423  7011.0  18.510  0.124544    18662.0     NaN -0.003661   \n",
       "2014-12-31   89428  6022.0  57.080 -0.079948  1216670.0     NaN -0.003661   \n",
       "2014-12-31   90756  3711.0  48.650  0.071586    78128.0     NaN -0.003661   \n",
       "2014-12-31   12884  9999.0  16.320  0.094251    16026.0     NaN -0.003661   \n",
       "\n",
       "              ewretd      lret   lvwretd   lewretd         size  \n",
       "date                                                             \n",
       "2012-01-31  0.085342  0.065011  0.052725  0.081895      1058.10  \n",
       "2012-01-31  0.085342  0.042559  0.052725  0.081895     39540.48  \n",
       "2012-01-31  0.085342  0.008925  0.052725  0.081895      8046.50  \n",
       "2012-01-31  0.085342 -0.381260  0.052725  0.081895     13611.50  \n",
       "2012-01-31  0.085342  0.070129  0.052725  0.081895    501204.00  \n",
       "...              ...       ...       ...       ...          ...  \n",
       "2014-12-31 -0.000181  0.097215 -0.003668 -0.000181    527007.70  \n",
       "2014-12-31 -0.000181  0.117378 -0.003668 -0.000181    345433.62  \n",
       "2014-12-31 -0.000181 -0.083325 -0.003668 -0.000181  69447523.60  \n",
       "2014-12-31 -0.000181  0.069140 -0.003668 -0.000181   3800927.20  \n",
       "2014-12-31 -0.000181  0.090070 -0.003668 -0.000181    261544.32  \n",
       "\n",
       "[242802 rows x 12 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crsp_t2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "papermill": {
     "duration": 0.083896,
     "end_time": "2021-01-21T14:11:31.955263",
     "exception": false,
     "start_time": "2021-01-21T14:11:31.871367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Merge with stocks in portfolios, to keep only those stocks\n",
    "crsp_t2 = pd.merge(crsp_t2.reset_index(), portfolio, on=['permno'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "papermill": {
     "duration": 0.08556,
     "end_time": "2021-01-21T14:11:32.100892",
     "exception": false,
     "start_time": "2021-01-21T14:11:32.015332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>permno</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "      <th>size</th>\n",
       "      <th>lexret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-01-31</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>29.9000</td>\n",
       "      <td>-0.199357</td>\n",
       "      <td>38582.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.054140</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>-0.222340</td>\n",
       "      <td>0.052725</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>1.153602e+06</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-02-29</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>25.5200</td>\n",
       "      <td>-0.146488</td>\n",
       "      <td>36232.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.041253</td>\n",
       "      <td>0.036494</td>\n",
       "      <td>-0.158396</td>\n",
       "      <td>0.040425</td>\n",
       "      <td>0.035844</td>\n",
       "      <td>9.246406e+05</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-03-30</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>20.6500</td>\n",
       "      <td>-0.190831</td>\n",
       "      <td>37082.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.024039</td>\n",
       "      <td>0.017608</td>\n",
       "      <td>-0.211747</td>\n",
       "      <td>0.023755</td>\n",
       "      <td>0.017455</td>\n",
       "      <td>7.657433e+05</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-04-30</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>21.1800</td>\n",
       "      <td>0.025666</td>\n",
       "      <td>32681.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.006840</td>\n",
       "      <td>-0.009106</td>\n",
       "      <td>0.025342</td>\n",
       "      <td>-0.006864</td>\n",
       "      <td>-0.009148</td>\n",
       "      <td>6.921836e+05</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-31</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>27.0100</td>\n",
       "      <td>0.275260</td>\n",
       "      <td>25581.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.065641</td>\n",
       "      <td>-0.068418</td>\n",
       "      <td>0.243150</td>\n",
       "      <td>-0.067895</td>\n",
       "      <td>-0.070871</td>\n",
       "      <td>6.909428e+05</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>2014-02-28</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>0.6476</td>\n",
       "      <td>-0.405872</td>\n",
       "      <td>48318.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.046225</td>\n",
       "      <td>0.044257</td>\n",
       "      <td>-0.520660</td>\n",
       "      <td>0.045188</td>\n",
       "      <td>0.043306</td>\n",
       "      <td>3.129074e+04</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>2014-03-31</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>1.6000</td>\n",
       "      <td>-0.752934</td>\n",
       "      <td>9388.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.004544</td>\n",
       "      <td>0.001028</td>\n",
       "      <td>-1.398100</td>\n",
       "      <td>0.004534</td>\n",
       "      <td>0.001027</td>\n",
       "      <td>1.502080e+04</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>2014-04-30</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>0.1100</td>\n",
       "      <td>-0.931250</td>\n",
       "      <td>71999.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.001569</td>\n",
       "      <td>-0.022319</td>\n",
       "      <td>-2.677279</td>\n",
       "      <td>0.001568</td>\n",
       "      <td>-0.022572</td>\n",
       "      <td>7.919890e+03</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>2014-05-30</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>1.3800</td>\n",
       "      <td>-0.749091</td>\n",
       "      <td>21139.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.020260</td>\n",
       "      <td>0.006647</td>\n",
       "      <td>-1.382665</td>\n",
       "      <td>0.020057</td>\n",
       "      <td>0.006625</td>\n",
       "      <td>2.917182e+04</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>2014-06-30</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>0.2500</td>\n",
       "      <td>-0.818841</td>\n",
       "      <td>144550.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.027991</td>\n",
       "      <td>0.039501</td>\n",
       "      <td>-1.708380</td>\n",
       "      <td>0.027606</td>\n",
       "      <td>0.038741</td>\n",
       "      <td>3.613750e+04</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>879 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          date  permno   siccd      prc       ret    shrout  spread    vwretd  \\\n",
       "0   2012-01-31   92813  6726.0  29.9000 -0.199357   38582.0     NaN  0.054140   \n",
       "1   2012-02-29   92813  6726.0  25.5200 -0.146488   36232.0     NaN  0.041253   \n",
       "2   2012-03-30   92813  6726.0  20.6500 -0.190831   37082.0     NaN  0.024039   \n",
       "3   2012-04-30   92813  6726.0  21.1800  0.025666   32681.0     NaN -0.006840   \n",
       "4   2012-05-31   92813  6726.0  27.0100  0.275260   25581.0     NaN -0.065641   \n",
       "..         ...     ...     ...      ...       ...       ...     ...       ...   \n",
       "874 2014-02-28   90743  4412.0   0.6476 -0.405872   48318.0     NaN  0.046225   \n",
       "875 2014-03-31   90743  4412.0   1.6000 -0.752934    9388.0     NaN  0.004544   \n",
       "876 2014-04-30   90743  4412.0   0.1100 -0.931250   71999.0     NaN  0.001569   \n",
       "877 2014-05-30   90743  4412.0   1.3800 -0.749091   21139.0     NaN  0.020260   \n",
       "878 2014-06-30   90743  4412.0   0.2500 -0.818841  144550.0     NaN  0.027991   \n",
       "\n",
       "       ewretd      lret   lvwretd   lewretd          size    lexret  \n",
       "0    0.085342 -0.222340  0.052725  0.081895  1.153602e+06 -5.168006  \n",
       "1    0.036494 -0.158396  0.040425  0.035844  9.246406e+05 -5.168006  \n",
       "2    0.017608 -0.211747  0.023755  0.017455  7.657433e+05 -5.168006  \n",
       "3   -0.009106  0.025342 -0.006864 -0.009148  6.921836e+05 -5.168006  \n",
       "4   -0.068418  0.243150 -0.067895 -0.070871  6.909428e+05 -5.168006  \n",
       "..        ...       ...       ...       ...           ...       ...  \n",
       "874  0.044257 -0.520660  0.045188  0.043306  3.129074e+04 -3.592272  \n",
       "875  0.001028 -1.398100  0.004534  0.001027  1.502080e+04 -3.592272  \n",
       "876 -0.022319 -2.677279  0.001568 -0.022572  7.919890e+03 -3.592272  \n",
       "877  0.006647 -1.382665  0.020057  0.006625  2.917182e+04 -3.592272  \n",
       "878  0.039501 -1.708380  0.027606  0.038741  3.613750e+04 -3.592272  \n",
       "\n",
       "[879 rows x 14 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crsp_t2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.060351,
     "end_time": "2021-01-21T14:11:32.221068",
     "exception": false,
     "start_time": "2021-01-21T14:11:32.160717",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** What was the index for crsp_t2 before reset_index()? What is the index now?  \n",
    "** Why has the number of observations gone down from 25011 to 1262?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "papermill": {
     "duration": 0.085502,
     "end_time": "2021-01-21T14:11:32.365978",
     "exception": false,
     "start_time": "2021-01-21T14:11:32.280476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>permno</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "      <th>size</th>\n",
       "      <th>lexret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-01-31</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>29.90</td>\n",
       "      <td>-0.199357</td>\n",
       "      <td>38582.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.054140</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>-0.222340</td>\n",
       "      <td>0.052725</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>1153601.80</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-02-29</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>25.52</td>\n",
       "      <td>-0.146488</td>\n",
       "      <td>36232.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.041253</td>\n",
       "      <td>0.036494</td>\n",
       "      <td>-0.158396</td>\n",
       "      <td>0.040425</td>\n",
       "      <td>0.035844</td>\n",
       "      <td>924640.64</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-03-30</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>20.65</td>\n",
       "      <td>-0.190831</td>\n",
       "      <td>37082.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.024039</td>\n",
       "      <td>0.017608</td>\n",
       "      <td>-0.211747</td>\n",
       "      <td>0.023755</td>\n",
       "      <td>0.017455</td>\n",
       "      <td>765743.30</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-04-30</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>21.18</td>\n",
       "      <td>0.025666</td>\n",
       "      <td>32681.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.006840</td>\n",
       "      <td>-0.009106</td>\n",
       "      <td>0.025342</td>\n",
       "      <td>-0.006864</td>\n",
       "      <td>-0.009148</td>\n",
       "      <td>692183.58</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-31</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>27.01</td>\n",
       "      <td>0.275260</td>\n",
       "      <td>25581.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.065641</td>\n",
       "      <td>-0.068418</td>\n",
       "      <td>0.243150</td>\n",
       "      <td>-0.067895</td>\n",
       "      <td>-0.070871</td>\n",
       "      <td>690942.81</td>\n",
       "      <td>-5.168006</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  permno   siccd    prc       ret   shrout  spread    vwretd  \\\n",
       "0 2012-01-31   92813  6726.0  29.90 -0.199357  38582.0     NaN  0.054140   \n",
       "1 2012-02-29   92813  6726.0  25.52 -0.146488  36232.0     NaN  0.041253   \n",
       "2 2012-03-30   92813  6726.0  20.65 -0.190831  37082.0     NaN  0.024039   \n",
       "3 2012-04-30   92813  6726.0  21.18  0.025666  32681.0     NaN -0.006840   \n",
       "4 2012-05-31   92813  6726.0  27.01  0.275260  25581.0     NaN -0.065641   \n",
       "\n",
       "     ewretd      lret   lvwretd   lewretd        size    lexret  \n",
       "0  0.085342 -0.222340  0.052725  0.081895  1153601.80 -5.168006  \n",
       "1  0.036494 -0.158396  0.040425  0.035844   924640.64 -5.168006  \n",
       "2  0.017608 -0.211747  0.023755  0.017455   765743.30 -5.168006  \n",
       "3 -0.009106  0.025342 -0.006864 -0.009148   692183.58 -5.168006  \n",
       "4 -0.068418  0.243150 -0.067895 -0.070871   690942.81 -5.168006  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crsp_t2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "papermill": {
     "duration": 0.081484,
     "end_time": "2021-01-21T14:11:32.507588",
     "exception": false,
     "start_time": "2021-01-21T14:11:32.426104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>permno</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "      <th>size</th>\n",
       "      <th>lexret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>2014-02-28</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>0.6476</td>\n",
       "      <td>-0.405872</td>\n",
       "      <td>48318.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.046225</td>\n",
       "      <td>0.044257</td>\n",
       "      <td>-0.520660</td>\n",
       "      <td>0.045188</td>\n",
       "      <td>0.043306</td>\n",
       "      <td>31290.7368</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>2014-03-31</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>1.6000</td>\n",
       "      <td>-0.752934</td>\n",
       "      <td>9388.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.004544</td>\n",
       "      <td>0.001028</td>\n",
       "      <td>-1.398100</td>\n",
       "      <td>0.004534</td>\n",
       "      <td>0.001027</td>\n",
       "      <td>15020.8000</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>2014-04-30</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>0.1100</td>\n",
       "      <td>-0.931250</td>\n",
       "      <td>71999.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.001569</td>\n",
       "      <td>-0.022319</td>\n",
       "      <td>-2.677279</td>\n",
       "      <td>0.001568</td>\n",
       "      <td>-0.022572</td>\n",
       "      <td>7919.8900</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>2014-05-30</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>1.3800</td>\n",
       "      <td>-0.749091</td>\n",
       "      <td>21139.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.020260</td>\n",
       "      <td>0.006647</td>\n",
       "      <td>-1.382665</td>\n",
       "      <td>0.020057</td>\n",
       "      <td>0.006625</td>\n",
       "      <td>29171.8200</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>2014-06-30</td>\n",
       "      <td>90743</td>\n",
       "      <td>4412.0</td>\n",
       "      <td>0.2500</td>\n",
       "      <td>-0.818841</td>\n",
       "      <td>144550.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.027991</td>\n",
       "      <td>0.039501</td>\n",
       "      <td>-1.708380</td>\n",
       "      <td>0.027606</td>\n",
       "      <td>0.038741</td>\n",
       "      <td>36137.5000</td>\n",
       "      <td>-3.592272</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          date  permno   siccd     prc       ret    shrout  spread    vwretd  \\\n",
       "874 2014-02-28   90743  4412.0  0.6476 -0.405872   48318.0     NaN  0.046225   \n",
       "875 2014-03-31   90743  4412.0  1.6000 -0.752934    9388.0     NaN  0.004544   \n",
       "876 2014-04-30   90743  4412.0  0.1100 -0.931250   71999.0     NaN  0.001569   \n",
       "877 2014-05-30   90743  4412.0  1.3800 -0.749091   21139.0     NaN  0.020260   \n",
       "878 2014-06-30   90743  4412.0  0.2500 -0.818841  144550.0     NaN  0.027991   \n",
       "\n",
       "       ewretd      lret   lvwretd   lewretd        size    lexret  \n",
       "874  0.044257 -0.520660  0.045188  0.043306  31290.7368 -3.592272  \n",
       "875  0.001028 -1.398100  0.004534  0.001027  15020.8000 -3.592272  \n",
       "876 -0.022319 -2.677279  0.001568 -0.022572   7919.8900 -3.592272  \n",
       "877  0.006647 -1.382665  0.020057  0.006625  29171.8200 -3.592272  \n",
       "878  0.039501 -1.708380  0.027606  0.038741  36137.5000 -3.592272  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crsp_t2.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "papermill": {
     "duration": 0.076738,
     "end_time": "2021-01-21T14:11:32.645157",
     "exception": false,
     "start_time": "2021-01-21T14:11:32.568419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 11018}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 32636}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 59483}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 77437}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 80625}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 83551}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 85047}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 88945}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 89030}, {'date': numpy.datetime64('2012-01-31T00:00:00.000000000'), 'permno': 89452}]\n",
      "<class 'list'>\n",
      "<class 'dict'>\n",
      "35\n"
     ]
    }
   ],
   "source": [
    "# We want to make sure we have one observation for each stock/date.\n",
    "# If a stock is delisted, its returns will be 0 after it disappears,\n",
    "# so we just fill in these missing values.\n",
    "\n",
    "# The idea here is to create a DataFrame with all the permno/date pairs\n",
    "# that we want in the final dataset. Then we merge that list with the\n",
    "# dataset using \"outer\" which will generate missing values for the\n",
    "# pairs that are not in the dataset.\n",
    "\n",
    "# Get the dates in the dataset.\n",
    "pairs_t2 = [{'date': d, 'permno': p} for d in crsp_t2['date'].unique() \n",
    "                                    for p in portfolio['permno'].unique()]\n",
    "print(pairs_t2[:10])\n",
    "print(type(pairs_t2))\n",
    "print(type(pairs_t2[0]))\n",
    "print(len(portfolio))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.060513,
     "end_time": "2021-01-21T14:11:32.774386",
     "exception": false,
     "start_time": "2021-01-21T14:11:32.713873",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** What is the implication of filling in missing returns with 0?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "papermill": {
     "duration": 0.080715,
     "end_time": "2021-01-21T14:11:32.915888",
     "exception": false,
     "start_time": "2021-01-21T14:11:32.835173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1260 entries, 0 to 1259\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   date    1260 non-null   datetime64[ns]\n",
      " 1   permno  1260 non-null   int64         \n",
      "dtypes: datetime64[ns](1), int64(1)\n",
      "memory usage: 19.8 KB\n"
     ]
    }
   ],
   "source": [
    "pairs_t2 = pd.DataFrame(pairs_t2)\n",
    "pairs_t2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "papermill": {
     "duration": 0.083758,
     "end_time": "2021-01-21T14:11:33.064595",
     "exception": false,
     "start_time": "2021-01-21T14:11:32.980837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1260 entries, 0 to 1259\n",
      "Data columns (total 14 columns):\n",
      " #   Column   Non-Null Count  Dtype         \n",
      "---  ------   --------------  -----         \n",
      " 0   date     1260 non-null   datetime64[ns]\n",
      " 1   permno   1260 non-null   int64         \n",
      " 2   siccd    879 non-null    float64       \n",
      " 3   prc      879 non-null    float64       \n",
      " 4   ret      879 non-null    float64       \n",
      " 5   shrout   879 non-null    float64       \n",
      " 6   spread   17 non-null     float64       \n",
      " 7   vwretd   879 non-null    float64       \n",
      " 8   ewretd   879 non-null    float64       \n",
      " 9   lret     879 non-null    float64       \n",
      " 10  lvwretd  879 non-null    float64       \n",
      " 11  lewretd  879 non-null    float64       \n",
      " 12  size     879 non-null    float64       \n",
      " 13  lexret   879 non-null    float64       \n",
      "dtypes: datetime64[ns](1), float64(12), int64(1)\n",
      "memory usage: 147.7 KB\n"
     ]
    }
   ],
   "source": [
    "# Merge to generate placeholders\n",
    "\n",
    "crsp_t2 = pd.merge(crsp_t2, pairs_t2, how='outer', on=['permno', 'date'])\n",
    "crsp_t2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "papermill": {
     "duration": 0.072786,
     "end_time": "2021-01-21T14:11:33.199256",
     "exception": false,
     "start_time": "2021-01-21T14:11:33.126470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fill missing values with 0\n",
    "ret_cols = ['ret', 'vwretd', 'ewretd', 'lvwretd','lewretd', 'lret', 'lexret']\n",
    "crsp_t2[ret_cols] = crsp_t2[ret_cols].fillna(0.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "papermill": {
     "duration": 0.075546,
     "end_time": "2021-01-21T14:11:33.338292",
     "exception": false,
     "start_time": "2021-01-21T14:11:33.262746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Now we want the return up to each point in time\n",
    "crsp_t2['lcumret'] = crsp_t2.groupby('permno')['lret'].cumsum()\n",
    "crsp_t2['lcum' + benchmark] = crsp_t2.groupby('permno')['l' + benchmark].cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "papermill": {
     "duration": 0.284111,
     "end_time": "2021-01-21T14:11:33.684312",
     "exception": false,
     "start_time": "2021-01-21T14:11:33.400201",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# At each point in time, the return of the portfolio will be the \n",
    "# cumulative return of each component weighted by the initial weight.\n",
    "# Note that here we need the average (equally- or value-weighted) cumulative return\n",
    "# So, we need to back out the cumulative return from its log form.\n",
    "\n",
    "crsp_t2['cumret'] = np.exp(crsp_t2['lcumret']) - 1\n",
    "crsp_t2['cum' + benchmark] = np.exp(crsp_t2['lcum' + benchmark]) - 1\n",
    "\n",
    "# Add weights, equal weighted is easy.\n",
    "portfolio['ew'] = 1 / len(portfolio)\n",
    "\n",
    "# For value-weighted, need to get size as of formation date.\n",
    "portfolio['date'] = date\n",
    "weights = pd.merge_asof(portfolio, df_crsp[['permno', 'size']],\n",
    "                        by='permno',\n",
    "                        left_on='date',\n",
    "                        right_index=True)\n",
    "weights['vw'] = weights['size'] / weights['size'].sum()\n",
    "\n",
    "del weights['lexret']\n",
    "del weights['date']\n",
    "del weights['size']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "papermill": {
     "duration": 0.075549,
     "end_time": "2021-01-21T14:11:33.823277",
     "exception": false,
     "start_time": "2021-01-21T14:11:33.747728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>ew</th>\n",
       "      <th>vw</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11018</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.121159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>32636</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.010233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>59483</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.016185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>77437</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.004308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>80625</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.054940</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   permno        ew        vw\n",
       "0   11018  0.028571  0.121159\n",
       "1   32636  0.028571  0.010233\n",
       "2   59483  0.028571  0.016185\n",
       "3   77437  0.028571  0.004308\n",
       "4   80625  0.028571  0.054940"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "papermill": {
     "duration": 0.074833,
     "end_time": "2021-01-21T14:11:33.960552",
     "exception": false,
     "start_time": "2021-01-21T14:11:33.885719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Now merge back with returns\n",
    "crsp_t2 = pd.merge(crsp_t2, weights, on='permno')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "papermill": {
     "duration": 0.086735,
     "end_time": "2021-01-21T14:11:34.109981",
     "exception": false,
     "start_time": "2021-01-21T14:11:34.023246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>permno</th>\n",
       "      <th>siccd</th>\n",
       "      <th>prc</th>\n",
       "      <th>ret</th>\n",
       "      <th>shrout</th>\n",
       "      <th>spread</th>\n",
       "      <th>vwretd</th>\n",
       "      <th>ewretd</th>\n",
       "      <th>lret</th>\n",
       "      <th>lvwretd</th>\n",
       "      <th>lewretd</th>\n",
       "      <th>size</th>\n",
       "      <th>lexret</th>\n",
       "      <th>lcumret</th>\n",
       "      <th>lcumewretd</th>\n",
       "      <th>cumret</th>\n",
       "      <th>cumewretd</th>\n",
       "      <th>ew</th>\n",
       "      <th>vw</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-01-31</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>29.90</td>\n",
       "      <td>-0.199357</td>\n",
       "      <td>38582.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.054140</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>-0.222340</td>\n",
       "      <td>0.052725</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>1153601.80</td>\n",
       "      <td>-5.168006</td>\n",
       "      <td>-0.222340</td>\n",
       "      <td>0.081895</td>\n",
       "      <td>-0.199357</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.21938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-02-29</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>25.52</td>\n",
       "      <td>-0.146488</td>\n",
       "      <td>36232.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.041253</td>\n",
       "      <td>0.036494</td>\n",
       "      <td>-0.158396</td>\n",
       "      <td>0.040425</td>\n",
       "      <td>0.035844</td>\n",
       "      <td>924640.64</td>\n",
       "      <td>-5.168006</td>\n",
       "      <td>-0.380736</td>\n",
       "      <td>0.117739</td>\n",
       "      <td>-0.316642</td>\n",
       "      <td>0.124950</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.21938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-03-30</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>20.65</td>\n",
       "      <td>-0.190831</td>\n",
       "      <td>37082.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.024039</td>\n",
       "      <td>0.017608</td>\n",
       "      <td>-0.211747</td>\n",
       "      <td>0.023755</td>\n",
       "      <td>0.017455</td>\n",
       "      <td>765743.30</td>\n",
       "      <td>-5.168006</td>\n",
       "      <td>-0.592483</td>\n",
       "      <td>0.135194</td>\n",
       "      <td>-0.447048</td>\n",
       "      <td>0.144759</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.21938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-04-30</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>21.18</td>\n",
       "      <td>0.025666</td>\n",
       "      <td>32681.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.006840</td>\n",
       "      <td>-0.009106</td>\n",
       "      <td>0.025342</td>\n",
       "      <td>-0.006864</td>\n",
       "      <td>-0.009148</td>\n",
       "      <td>692183.58</td>\n",
       "      <td>-5.168006</td>\n",
       "      <td>-0.567141</td>\n",
       "      <td>0.126046</td>\n",
       "      <td>-0.432855</td>\n",
       "      <td>0.134334</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.21938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-31</td>\n",
       "      <td>92813</td>\n",
       "      <td>6726.0</td>\n",
       "      <td>27.01</td>\n",
       "      <td>0.275260</td>\n",
       "      <td>25581.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.065641</td>\n",
       "      <td>-0.068418</td>\n",
       "      <td>0.243150</td>\n",
       "      <td>-0.067895</td>\n",
       "      <td>-0.070871</td>\n",
       "      <td>690942.81</td>\n",
       "      <td>-5.168006</td>\n",
       "      <td>-0.323991</td>\n",
       "      <td>0.055175</td>\n",
       "      <td>-0.276743</td>\n",
       "      <td>0.056726</td>\n",
       "      <td>0.028571</td>\n",
       "      <td>0.21938</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  permno   siccd    prc       ret   shrout  spread    vwretd  \\\n",
       "0 2012-01-31   92813  6726.0  29.90 -0.199357  38582.0     NaN  0.054140   \n",
       "1 2012-02-29   92813  6726.0  25.52 -0.146488  36232.0     NaN  0.041253   \n",
       "2 2012-03-30   92813  6726.0  20.65 -0.190831  37082.0     NaN  0.024039   \n",
       "3 2012-04-30   92813  6726.0  21.18  0.025666  32681.0     NaN -0.006840   \n",
       "4 2012-05-31   92813  6726.0  27.01  0.275260  25581.0     NaN -0.065641   \n",
       "\n",
       "     ewretd      lret   lvwretd   lewretd        size    lexret   lcumret  \\\n",
       "0  0.085342 -0.222340  0.052725  0.081895  1153601.80 -5.168006 -0.222340   \n",
       "1  0.036494 -0.158396  0.040425  0.035844   924640.64 -5.168006 -0.380736   \n",
       "2  0.017608 -0.211747  0.023755  0.017455   765743.30 -5.168006 -0.592483   \n",
       "3 -0.009106  0.025342 -0.006864 -0.009148   692183.58 -5.168006 -0.567141   \n",
       "4 -0.068418  0.243150 -0.067895 -0.070871   690942.81 -5.168006 -0.323991   \n",
       "\n",
       "   lcumewretd    cumret  cumewretd        ew       vw  \n",
       "0    0.081895 -0.199357   0.085342  0.028571  0.21938  \n",
       "1    0.117739 -0.316642   0.124950  0.028571  0.21938  \n",
       "2    0.135194 -0.447048   0.144759  0.028571  0.21938  \n",
       "3    0.126046 -0.432855   0.134334  0.028571  0.21938  \n",
       "4    0.055175 -0.276743   0.056726  0.028571  0.21938  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crsp_t2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "papermill": {
     "duration": 0.076632,
     "end_time": "2021-01-21T14:11:34.249826",
     "exception": false,
     "start_time": "2021-01-21T14:11:34.173194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Now compute the weighted cumulative return: equally- or value-weighted\n",
    "crsp_t2['wcumret'] = crsp_t2[weighting] * crsp_t2['cumret']\n",
    "crsp_t2['wcum' + benchmark] = crsp_t2[weighting] * crsp_t2['cum' + benchmark]\n",
    "\n",
    "portfolio_ret = crsp_t2.groupby(['date'])[['wcumret', 'wcum' + benchmark]].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "papermill": {
     "duration": 0.073148,
     "end_time": "2021-01-21T14:11:34.386343",
     "exception": false,
     "start_time": "2021-01-21T14:11:34.313195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Count the months\n",
    "portfolio_ret = portfolio_ret.reset_index()\n",
    "portfolio_ret['months'] = portfolio_ret.index.values + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "papermill": {
     "duration": 0.074656,
     "end_time": "2021-01-21T14:11:34.525192",
     "exception": false,
     "start_time": "2021-01-21T14:11:34.450536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "portfolio_ret['exret'] = portfolio_ret['wcumret'] - portfolio_ret['wcum' + benchmark]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "papermill": {
     "duration": 0.079601,
     "end_time": "2021-01-21T14:11:34.668545",
     "exception": false,
     "start_time": "2021-01-21T14:11:34.588944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>wcumret</th>\n",
       "      <th>wcumewretd</th>\n",
       "      <th>months</th>\n",
       "      <th>exret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-01-31</td>\n",
       "      <td>0.176296</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>1</td>\n",
       "      <td>0.090954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-02-29</td>\n",
       "      <td>0.336930</td>\n",
       "      <td>0.122687</td>\n",
       "      <td>2</td>\n",
       "      <td>0.214243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-03-30</td>\n",
       "      <td>0.487541</td>\n",
       "      <td>0.140797</td>\n",
       "      <td>3</td>\n",
       "      <td>0.346744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-04-30</td>\n",
       "      <td>0.515147</td>\n",
       "      <td>0.131862</td>\n",
       "      <td>4</td>\n",
       "      <td>0.383284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-31</td>\n",
       "      <td>0.366925</td>\n",
       "      <td>0.067558</td>\n",
       "      <td>5</td>\n",
       "      <td>0.299367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date   wcumret  wcumewretd  months     exret\n",
       "0 2012-01-31  0.176296    0.085342       1  0.090954\n",
       "1 2012-02-29  0.336930    0.122687       2  0.214243\n",
       "2 2012-03-30  0.487541    0.140797       3  0.346744\n",
       "3 2012-04-30  0.515147    0.131862       4  0.383284\n",
       "4 2012-05-31  0.366925    0.067558       5  0.299367"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio_ret.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.06541,
     "end_time": "2021-01-21T14:11:34.799162",
     "exception": false,
     "start_time": "2021-01-21T14:11:34.733752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-three-two-two\"></a>\n",
    "## 3.2.2 Computing holding period returns on each portfolio/date (N instances) with a function (Key idea #3)\n",
    "\n",
    "Now that we have the code working for one portfolio/date to compute cumulative abnormal returns for portfolios during the holding period, we will generalize it to run on each portfolio/date with a function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_holding_returns(date, portfolio, df, benchmark='ewretd', weighting='ew',\n",
    "                            hold_period=36, partition = \"permno\"):\n",
    "    \"\"\"\n",
    "    Function computes the average returns of a given portoflio previously generated by compuete_performance_portfolio() \n",
    "    \n",
    "    Parameters:\n",
    "        date (np.datetime): The date at which to start looking\n",
    "        portfolio (pandas.DataFrame): dataframe slice from compute_performance_portfolio()\n",
    "        df (pandas.DataFrame): original dataframe source \n",
    "        benchmark (str): the benchmark used, either value weighted or equal weighted. See column name in df\n",
    "        weighting (str): either value or equal weighted. \n",
    "        partition (str): type of partition to be used\n",
    "    Returns:\n",
    "        dataframe: portfolio returns \n",
    "    \"\"\"\n",
    "    \n",
    "    port = portfolio.copy()\n",
    "    end_dt = date + pd.offsets.MonthBegin(1) * hold_period\n",
    "    # Select obs for the formation period\n",
    "    crsp_t2 = df[date:end_dt].copy()\n",
    "    # Merge with stocks in portfolios, to keep only those stocks\n",
    "    crsp_t2 = pd.merge(crsp_t2.reset_index(), port, on=[partition])\n",
    "    crsp_t2\n",
    "    \n",
    "\n",
    "    # Get the dates in the dataset.\n",
    "    pairs_t2 = [{'date': d, partition: p} for d in crsp_t2['date'].unique() for p in port[partition].unique()]\n",
    "    pairs_t2 = pd.DataFrame(pairs_t2)\n",
    "    pairs_t2\n",
    "    crsp_t2 = pd.merge(crsp_t2, pairs_t2, how='outer', on=[partition, 'date'])\n",
    "    ret_cols = ['ret', 'vwretd', 'ewretd', 'lvwretd','lewretd', 'lret', 'lexret']\n",
    "    crsp_t2[ret_cols] = crsp_t2[ret_cols].fillna(0.0)\n",
    "    \n",
    "    # Now we want the return up to each point in time\n",
    "    crsp_t2['lcumret'] = crsp_t2.groupby(partition)['lret'].cumsum()\n",
    "    crsp_t2['lcum' + benchmark] = crsp_t2.groupby(partition)['l' + benchmark].cumsum()\n",
    "\n",
    "    # At each point in time, the return of the portfolio will be the \n",
    "    # cumulative return of each component weighted by the initial weight.\n",
    "    # Note that here we need the simple return average, not log return.\n",
    "    crsp_t2['cumret'] = np.exp(crsp_t2['lcumret']) - 1\n",
    "    crsp_t2['cum' + benchmark] = np.exp(crsp_t2['lcum' + benchmark]) - 1\n",
    "\n",
    "    # Add weights, equal weighted is easy.\n",
    "    port['ew'] = 1 / len(port)\n",
    "\n",
    "    # For value-weighted, need to get size as of formation date.\n",
    "    port['date'] = date\n",
    "    weights = pd.merge_asof(port, df[[partition, 'size']],\n",
    "                            by=partition,\n",
    "                            left_on='date',\n",
    "                            right_index=True)\n",
    "    weights['vw'] = weights['size'] / weights['size'].sum()\n",
    "\n",
    "    del weights['lexret']\n",
    "    del weights['date']\n",
    "    del weights['size']\n",
    "    \n",
    "    # Now merge back with returns\n",
    "    crsp_t2 = pd.merge(crsp_t2, weights, on=partition)\n",
    "    \n",
    "    # Now compute the weighted cumulative return \n",
    "    crsp_t2['wcumret'] = crsp_t2[weighting] * crsp_t2['cumret']\n",
    "    crsp_t2['wcum' + benchmark] = crsp_t2[weighting] * crsp_t2['cum' + benchmark]\n",
    "\n",
    "    portfolio_ret = crsp_t2.groupby(['date'])[['wcumret', 'wcum' + benchmark]].sum()\n",
    "    \n",
    "    # Count the months\n",
    "    portfolio_ret = portfolio_ret.reset_index()\n",
    "    portfolio_ret['months'] = portfolio_ret.index.values + 1\n",
    "    \n",
    "    portfolio_ret['exret'] = portfolio_ret['wcumret'] - portfolio_ret['wcum' + benchmark]\n",
    "    \n",
    "    return portfolio_ret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "bottom_portfolio_ret = []\n",
    "top_portfolio_ret = []\n",
    "\n",
    "form_period = 36 # 36 Formation period, in month\n",
    "n_stocks = 35  # Number of stocks in the top and bottom performance\n",
    "hold_period = 36\n",
    "benchmark = 'ewretd' # Benchmark market return to use ('vwretd' or 'ewretd')\n",
    "\n",
    "for date in dates:\n",
    "    bottom_portfolio_ret.append(compute_holding_returns(date, portfolios[date][0], df_crsp, benchmark='ewretd', weighting='ew', hold_period = hold_period))\n",
    "    top_portfolio_ret.append(compute_holding_returns(date, portfolios[date][1], df_crsp, benchmark='ewretd', weighting='ew', hold_period = hold_period))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.065049,
     "end_time": "2021-01-21T14:11:42.981798",
     "exception": false,
     "start_time": "2021-01-21T14:11:42.916749",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** Which data structures do both bottom_portfolio_ret and top_portfolio_ret belong to?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "papermill": {
     "duration": 0.07273,
     "end_time": "2021-01-21T14:11:43.119652",
     "exception": false,
     "start_time": "2021-01-21T14:11:43.046922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bottom_portfolio_ret\n",
    "type(bottom_portfolio_ret)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.06437,
     "end_time": "2021-01-21T14:11:43.248969",
     "exception": false,
     "start_time": "2021-01-21T14:11:43.184599",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Ops, we have a list of dataframes here. Let's join the dataframes together into a single dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "papermill": {
     "duration": 0.097765,
     "end_time": "2021-01-21T14:11:43.411737",
     "exception": false,
     "start_time": "2021-01-21T14:11:43.313972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "bottom_portfolio_ret = pd.concat(bottom_portfolio_ret)\n",
    "top_portfolio_ret = pd.concat(top_portfolio_ret)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "papermill": {
     "duration": 0.085235,
     "end_time": "2021-01-21T14:11:43.562055",
     "exception": false,
     "start_time": "2021-01-21T14:11:43.476820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>wcumret</th>\n",
       "      <th>wcumewretd</th>\n",
       "      <th>months</th>\n",
       "      <th>exret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-01-31</td>\n",
       "      <td>0.176296</td>\n",
       "      <td>0.085342</td>\n",
       "      <td>1</td>\n",
       "      <td>0.090954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-02-29</td>\n",
       "      <td>0.336930</td>\n",
       "      <td>0.122687</td>\n",
       "      <td>2</td>\n",
       "      <td>0.214243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-03-30</td>\n",
       "      <td>0.487541</td>\n",
       "      <td>0.140797</td>\n",
       "      <td>3</td>\n",
       "      <td>0.346744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-04-30</td>\n",
       "      <td>0.515147</td>\n",
       "      <td>0.131862</td>\n",
       "      <td>4</td>\n",
       "      <td>0.383284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-05-31</td>\n",
       "      <td>0.366925</td>\n",
       "      <td>0.067558</td>\n",
       "      <td>5</td>\n",
       "      <td>0.299367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>2020-08-31</td>\n",
       "      <td>0.613454</td>\n",
       "      <td>0.039283</td>\n",
       "      <td>32</td>\n",
       "      <td>0.574171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>2020-09-30</td>\n",
       "      <td>0.619028</td>\n",
       "      <td>0.022407</td>\n",
       "      <td>33</td>\n",
       "      <td>0.596621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2020-10-30</td>\n",
       "      <td>0.557577</td>\n",
       "      <td>0.022758</td>\n",
       "      <td>34</td>\n",
       "      <td>0.534819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>2020-11-30</td>\n",
       "      <td>0.406671</td>\n",
       "      <td>0.127467</td>\n",
       "      <td>35</td>\n",
       "      <td>0.279204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>2020-12-31</td>\n",
       "      <td>0.419161</td>\n",
       "      <td>0.178833</td>\n",
       "      <td>36</td>\n",
       "      <td>0.240328</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>107 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         date   wcumret  wcumewretd  months     exret\n",
       "0  2012-01-31  0.176296    0.085342       1  0.090954\n",
       "1  2012-02-29  0.336930    0.122687       2  0.214243\n",
       "2  2012-03-30  0.487541    0.140797       3  0.346744\n",
       "3  2012-04-30  0.515147    0.131862       4  0.383284\n",
       "4  2012-05-31  0.366925    0.067558       5  0.299367\n",
       "..        ...       ...         ...     ...       ...\n",
       "31 2020-08-31  0.613454    0.039283      32  0.574171\n",
       "32 2020-09-30  0.619028    0.022407      33  0.596621\n",
       "33 2020-10-30  0.557577    0.022758      34  0.534819\n",
       "34 2020-11-30  0.406671    0.127467      35  0.279204\n",
       "35 2020-12-31  0.419161    0.178833      36  0.240328\n",
       "\n",
       "[107 rows x 5 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bottom_portfolio_ret\n",
    "#  type(bottom_portfolio_ret)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.066012,
     "end_time": "2021-01-21T14:11:43.694581",
     "exception": false,
     "start_time": "2021-01-21T14:11:43.628569",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "** Now which data structures do both bottom_portfolio_ret and top_portfolio_ret belong to?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.110764,
     "end_time": "2021-01-21T14:11:43.871558",
     "exception": false,
     "start_time": "2021-01-21T14:11:43.760794",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, we have a nice monolithic dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can write the above into a function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_portfolio_performance(dates, df, form_period=36, n_stocks=35,\n",
    "                                   benchmark='ewretd', weighting = \"ew\", hold_period = 36, partition = \"permno\"):\n",
    "    \"\"\"\n",
    "    Function computes the average returns of all portfolios formed from the form period, returns both the bottom and top portfolios\n",
    "    \n",
    "    Parameters:\n",
    "        dates (list): List of dates for formation period\n",
    "        df (pandas.DataFrame): original dataframe source \n",
    "        form_period (int): the number of months used to lookback and form the portfolio\n",
    "        n_stocks (int): the number of stocks to form the portfolio \n",
    "        benchmark (str): the benchmark used, either value weighted or equal weighted. See column name in df\n",
    "        weighting (str): either value or equal weighted. \n",
    "        hold_period (int): number of months to hold the portfolio \n",
    "        partition (str): type of partition to be used\n",
    "    Returns:\n",
    "        tuple: contains 2 dataframes, the bottom portfolio and top portfolio\n",
    "    \"\"\"\n",
    "    portfolios = {}\n",
    "    bottom_portfolio_ret = []\n",
    "    top_portfolio_ret = []\n",
    "    \n",
    "    for date in dates:\n",
    "        portfolios[date] = compute_performance_portfolios(date, df, form_period, n_stocks, benchmark, partition)\n",
    "    \n",
    "    for date in dates:\n",
    "        bottom_portfolio_ret.append(compute_holding_returns(date, portfolios[date][0], df, benchmark, weighting, hold_period, partition))\n",
    "        top_portfolio_ret.append(compute_holding_returns(date, portfolios[date][1], df, benchmark, weighting, hold_period, partition))\n",
    "    \n",
    "    bottom_portfolio_ret = pd.concat(bottom_portfolio_ret)\n",
    "    top_portfolio_ret = pd.concat(top_portfolio_ret)\n",
    "    \n",
    "    return bottom_portfolio_ret, top_portfolio_ret\n",
    "\n",
    "def plot_portfolio_performance(bottom_portfolio_ret, top_portfolio_ret, form_period, periodicity):\n",
    "    grads = []\n",
    "    i = periodicity\n",
    "    while(i < form_period):\n",
    "        grads.append(i)\n",
    "        i += periodicity\n",
    "        \n",
    "    ax = bottom_portfolio_ret.groupby('months')['exret'].mean().plot(label='Past losers')\n",
    "    top_portfolio_ret.groupby('months')['exret'].mean().plot(ax=ax, label='Past winners')\n",
    "    ax.legend()\n",
    "    ax.axhline(y=0,  color='black', alpha=0.5, linestyle=':')\n",
    "    for grad in grads:\n",
    "        ax.axvline(x=grad, color='black', alpha=0.5, linestyle='-')\n",
    "        #ax.axvline(x=24, color='black', alpha=0.5, linestyle='-')\n",
    "    return ax"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.065709,
     "end_time": "2021-01-21T14:11:44.004068",
     "exception": false,
     "start_time": "2021-01-21T14:11:43.938359",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-three-three\"></a>\n",
    "## 3.3 Question 3: Do current losers beat current winners in the future?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.064884,
     "end_time": "2021-01-21T14:11:44.134301",
     "exception": false,
     "start_time": "2021-01-21T14:11:44.069417",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"subsection-three-one-one\"></a>\n",
    "### 3.1.1 Full sample 2009 - 2020"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "papermill": {
     "duration": 0.090437,
     "end_time": "2021-01-21T14:11:45.293272",
     "exception": false,
     "start_time": "2021-01-21T14:11:45.202835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Excess Return for Top Performing Funds 0.5916848930689392\n",
      "P-values 0.13276748543257696\n",
      "we are accepting null hypothesis\n"
     ]
    }
   ],
   "source": [
    "tset, pval = stats.ttest_1samp(top_portfolio_ret[top_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'],0)\n",
    "\n",
    "print('Mean Excess Return for Top Performing Funds ' + str(top_portfolio_ret[top_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'].mean()))\n",
    "print('P-values ' + str(pval))\n",
    "if pval < 0.05:    # alpha value is 0.05 or 5%\n",
    "    print(\" we are rejecting null hypothesis\")\n",
    "else:\n",
    "    print(\"we are accepting null hypothesis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "papermill": {
     "duration": 0.088444,
     "end_time": "2021-01-21T14:11:45.452350",
     "exception": false,
     "start_time": "2021-01-21T14:11:45.363906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Excess Return for Bottom Performing Funds -0.08967338991408844\n",
      "P-values 0.8310861442984903\n",
      "we are accepting null hypothesis\n"
     ]
    }
   ],
   "source": [
    "tset, pval = stats.ttest_1samp(bottom_portfolio_ret[bottom_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'],0)\n",
    "\n",
    "print('Mean Excess Return for Bottom Performing Funds ' + str(bottom_portfolio_ret[bottom_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'].mean()))\n",
    "print('P-values ' + str(pval))\n",
    "if pval < 0.05:    # alpha value is 0.05 or 5%\n",
    "    print(\" we are rejecting null hypothesis\")\n",
    "else:\n",
    "    print(\"we are accepting null hypothesis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "papermill": {
     "duration": 0.101216,
     "end_time": "2021-01-21T14:11:45.623089",
     "exception": false,
     "start_time": "2021-01-21T14:11:45.521873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Excess Return for Top Performing Funds 0.5916848930689392\n",
      "Mean Excess Return for Bottom Performing Funds -0.08967338991408844\n",
      "Mean Difference Bottom Minus Top in Excess Return -0.6813582829830277\n",
      "P-values 0.19331135067907332\n",
      "we are accepting null hypothesis\n"
     ]
    }
   ],
   "source": [
    "tset, pval = stats.ttest_ind(top_portfolio_ret[top_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'],\n",
    "                             bottom_portfolio_ret[bottom_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'])\n",
    "\n",
    "print('Mean Excess Return for Top Performing Funds ' + str(top_portfolio_ret[top_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'].mean()))\n",
    "print('Mean Excess Return for Bottom Performing Funds ' + str(bottom_portfolio_ret[bottom_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'].mean()))\n",
    "print('Mean Difference Bottom Minus Top in Excess Return ' + \n",
    "      str(bottom_portfolio_ret[bottom_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'].mean() -                                                        \n",
    "          top_portfolio_ret[top_portfolio_ret['months']==36].set_index('date')[:'2020']['exret'].mean()))\n",
    "print('P-values ' + str(pval))\n",
    "if pval < 0.05:    # alpha value is 0.05 or 5%\n",
    "    print(\" we are rejecting null hypothesis\")\n",
    "else:\n",
    "    print(\"we are accepting null hypothesis\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can again place the above into functions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_mean_excess_returns(portfolio, end_month, end_year = '1980'):\n",
    "    \"\"\"\n",
    "    Function prints the mean excess returns of the portfolio, and checks if it deviates\n",
    "    significantly from 0. \n",
    "    \n",
    "    Paramters:\n",
    "        portfolio (pandas.DataFrame): 1 of the either portfolios formed from get_portfolio_performance()\n",
    "        end_month (int): the ending month (e.g 36 for the end of the portfolio)\n",
    "        end_year (int): year at which to end the observation\n",
    "    Returns:\n",
    "        null \n",
    "    \"\"\"\n",
    "    tset, pval = stats.ttest_1samp(portfolio[portfolio['months'] == end_month].set_index('date')[:end_year]['exret'], 0)\n",
    "    print(\"Mean Excess Return: \" + str(portfolio[portfolio['months'] == end_month].set_index('date')[:end_year]['exret'].mean()))\n",
    "    res = \"Do Not Reject Null Hypothesis\" if (pval < .05) else \"Reject Null Hypothesis\"\n",
    "    print(\"P-Value: \" + str(pval) + \", \" + res)\n",
    "\n",
    "def get_diff_excess_returns(portfolio1, portfolio2, end_month, end_year = '1980'):\n",
    "    \"\"\"\n",
    "    Function prints the difference in excess returns of 2 portfolios, and checks if it deviates\n",
    "    significantly from 0. \n",
    "    \n",
    "    Paramters:\n",
    "        portfolio1 (pandas.DataFrame): 1 of the either portfolios formed from get_portfolio_performance()\n",
    "        portfolio2 (pandas.DataFrame): 1 of the either portfolios formed from get_portfolio_performance()\n",
    "        end_month (int): the ending month (e.g 36 for the end of the portfolio)\n",
    "        end_year (int): year at which to end the observation\n",
    "    Returns:\n",
    "        null \n",
    "    \"\"\"\n",
    "    mean_ret_1 = portfolio1[portfolio1['months'] == end_month].set_index('date')[:end_year]['exret'].mean()\n",
    "    mean_ret_2 = portfolio2[portfolio2['months'] == end_month].set_index('date')[:end_year]['exret'].mean()\n",
    "    tset, pval = stats.ttest_ind(portfolio1[portfolio1['months'] == end_month].set_index('date')[:end_year]['exret'],\n",
    "                             portfolio2[portfolio2['months'] == end_month].set_index('date')[:end_year]['exret'])\n",
    "    print(\"Mean Excess Return, Top Performers: \" + str(mean_ret_2))\n",
    "    print(\"Mean Excess Return, Bottom Performers: \" + str(mean_ret_1))\n",
    "    print(\"Mean Difference (Bottom - Top) in Excess Returns: \" + str(mean_ret_1 - mean_ret_2))\n",
    "    res = \"Do Not Reject Null Hypothesis\" if (pval > .05) else \"Reject Null Hypothesis\"\n",
    "    print(\"P-Value: \" + str(pval) + \", \" + res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "papermill": {
     "duration": 0.070351,
     "end_time": "2021-01-21T14:11:45.763389",
     "exception": false,
     "start_time": "2021-01-21T14:11:45.693038",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"section-four\"></a>\n",
    "# 4. CONCLUSION \n",
    "\n",
    "Our empirical results (From 1933-2000) show that loser portfolios dramatically outperform winner portfolios, consistent with DeBondt and Thaler (1985). Over long holding period horizons, stocks appear to register significant price reversals. For example, the loser portfolio, made up of the worst-performing stocks in the formation period, consistently outperforms the winner portfolio during the evaluation period. One plausible explanation for the substantial amount of price reversal is based on behavioural finance, in that investors tend to overweight recent performance and underweight longer-term or baseline information in their decisions.\n",
    "\n",
    "For example, if a stock has recently suffered an earnings shortfall because of some temporary non-structural shift in economic opportunities, the price decline may be exaggerated due to the recentness of the news. Once depressed, the price may be slow to recover until investors realize their “overreaction” to the temporary bad news associated with the earnings deficiency, which then creates buying pressure to “reverse” the price decline.\n",
    "\n",
    "Adjusting beliefs to realistic longer-term opportunities, instead of shorter-term prospects and bases of information, causes the reversal. In the original paper, DeBondt and Thaler (1985) find a significant persistence to this reversal phenomenon and indicate that markets tend to suffer from investor overreaction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"section-five\"></a>\n",
    "# 5. Problem Set 1: Question 2 \n",
    "\n",
    "## Evaluate whether the buy-losers-sell-winners strategy still works in the recent 12 years (i.e., January 2009 to December 2020). Compare and contrast what you find with DeBondt and Thaler (1985)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Excess Return, Top Performers: 0.5916848930689392\n",
      "Mean Excess Return, Bottom Performers: -0.08967338991408844\n",
      "Mean Difference (Bottom - Top) in Excess Returns: -0.6813582829830277\n",
      "P-Value: 0.19331135067907332, Do Not Reject Null Hypothesis\n"
     ]
    }
   ],
   "source": [
    "get_diff_excess_returns(bottom_portfolio_ret, top_portfolio_ret, 36, '2020')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "papermill": {
     "duration": 0.24368,
     "end_time": "2021-01-21T14:11:44.443473",
     "exception": false,
     "start_time": "2021-01-21T14:11:44.199793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x144b7e24eb0>"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = bottom_portfolio_ret.groupby('months')['exret'].mean().plot(label='Past losers')\n",
    "top_portfolio_ret.groupby('months')['exret'].mean().plot(ax=ax, label='Past winners')\n",
    "ax.legend()\n",
    "ax.axhline(y=0,  color='black', alpha=0.5, linestyle=':')\n",
    "ax.axvline(x=12, color='black', alpha=0.5, linestyle='-')\n",
    "ax.axvline(x=24, color='black', alpha=0.5, linestyle='-')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "Based on the recent empirical results (2009-2020), we can conclude that the Debondt and Thaler (1985) findings do not hold true in the recent years. The winner portfolio outperforms the loser portfolio in every observed timeframe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.068957,
     "end_time": "2021-01-21T14:11:45.902312",
     "exception": false,
     "start_time": "2021-01-21T14:11:45.833355",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id=\"section-six\"></a>\n",
    "# 6. REFERENCES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.068974,
     "end_time": "2021-01-21T14:11:46.040981",
     "exception": false,
     "start_time": "2021-01-21T14:11:45.972007",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "De BONDT, W.F.M. and THALER, R. (1985), Does the Stock Market Overreact?. The Journal of Finance, 40: 793-805. doi:10.1111/j.1540-6261.1985.tb05004.x\n",
    "\n",
    "This notebook is adapted from code written by [Charles Martineau](http://www.charlesmartineau.com/), the University of Toronto and [Vincent Grégoire](http://www.vincentgregoire.com), Department of Finance, The University of Melbourne. \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "papermill": {
   "duration": 35.980962,
   "end_time": "2021-01-21T14:11:46.216236",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-01-21T14:11:10.235274",
   "version": "2.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
